[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Omics Data Handling and Visualization in R",
    "section": "",
    "text": "Omics Data Handling and Visualization in R\n17 May 2023\nFaculty of Science, Prince of Songkla University\n¬†\n\nBasic R programming for intermediate learner\nExploratory data analysis\nOmics data handling with Tidyverse bundle\nLearn graphical requirements for publications\nGenerating publication-quality plots\n\n\n\n\n\n\nFigure modified from @storyset. Designed by Freepik. Find more R hex stickers at RStudio hex stickers."
  },
  {
    "objectID": "schedule.html",
    "href": "schedule.html",
    "title": "Schedule",
    "section": "",
    "text": "This page contains an updated agenda for the Data Handling and Visualization in R workshop, as well as the speakers and our teaching assistants.\nüìÖ May 17th, 2023 üìçBSc0303, BSc bldg., Faculty of Science, PSU\n\n\n\nTime\nTopic\nMaterials\nSpeaker\nTA\n\n\n\n\n8:30 - 9:00\nRegistration\n\n\n\n\n\n9:00 - 9:30\nWelcome, Introduction, and Graphical Requirement for Article Submission\nüìñ\nPS\n\n\n\n9:30 - 10:20\nBasic R Programming\nüìñ\nPS, JN\nPY, KC\n\n\n10:20 - 10:30\nMorning Break\n\n\n\n\n\n10:30 - 11:15\nExploratory Data Analysis with R\nüìñ\nPS, JN\nPY, KC\n\n\n11:15 - 12:00\n\nGrammar of Graphics\nDirectory of Data Visualization\n\nüìñ\nüìñ\nPS, JN\nPY, KC\n\n\n12:00 - 13:00\nLunch\n\n\n\n\n\n13:00 - 14:15\nPlotting Omics Data (1)\nüìñ\nPS, JN\nPY, KC\n\n\n14:15 - 14:30\nAfternoon Break\n\n\n\n\n\n14:30 - 15:30\nPlotting Omics Data (2)\nüìñ\nPS, JN\nPY, KC\n\n\n15:30 - 16:00\nArranging Multiple Plots and Figures\nüìñ\nPS, JN\nPY, KC\n\n\n16:00 - 16:15\nQ & A\n\nEveryone\nEveryone\n\n\n16:15 - 16:30\nClosing and Feedback Session\n\nEveryone\nEveryone\n\n\n\n\nüì¢ Speakers & TA team\n\n\n\n\n\n\n\nPS: Ponsit Sathapondecha, JN: Jiratchaya Nuanpirom, PY: Prasert Yodsawat, KC: Khunanon Chanasongkhram"
  },
  {
    "objectID": "prerequisite.html",
    "href": "prerequisite.html",
    "title": "Prerequisites",
    "section": "",
    "text": "WindowsmacOS\n\n\n\nOS: Windows 10/11\nMemory: &gt; 8 GB RAM\nROM: storage using Solid-state drive (SSD) is preferable. (Here‚Äôs how to check)\n\n\n\n\nOS: macOS 11 (Big Sur) or higher\nMemory: &gt; 8 GB RAM"
  },
  {
    "objectID": "prerequisite.html#minimum-system-requirements",
    "href": "prerequisite.html#minimum-system-requirements",
    "title": "Prerequisites",
    "section": "",
    "text": "WindowsmacOS\n\n\n\nOS: Windows 10/11\nMemory: &gt; 8 GB RAM\nROM: storage using Solid-state drive (SSD) is preferable. (Here‚Äôs how to check)\n\n\n\n\nOS: macOS 11 (Big Sur) or higher\nMemory: &gt; 8 GB RAM"
  },
  {
    "objectID": "prerequisite.html#software-requirements",
    "href": "prerequisite.html#software-requirements",
    "title": "Prerequisites",
    "section": "Software Requirements",
    "text": "Software Requirements\nBefore the workshop day, users are asked to install the following software in advance.\n\n1. Install R\nR is programming language for statistical computing and graphical visualization, and is an open-source software for computing in R language.\nUsers can download R installer from the Comprehensive R Archive Network (CRAN): https://cran.rstudio.com.\n\nThe latest R version is 4.3.0 (2023-04-21) -- \"Already Tomorrow\".\n\n\n\n2. Install Rtools (Windows users only)\nRtools is used to build and install R packages from source code. Some important tools, such as tidyverse, require Rtools to install on Windows.\nUsers can install Rtools from CRAN: https://cran.rstudio.com/bin/windows/Rtools/rtools43/files/rtools43-5550-5548.exe\n\nThe current Rtools for Windows users is Rtools 4.3, which is compatible with version R 4.3.x.\n\n\n\n3. Install Rstudio Desktop\nRstudio is an integrated development environment (IDE) for computing in R language. Users can install Rstudio Desktop from official posit website https://posit.co/download/rstudio-desktop.\n\nCurrent Rstudio Desktop version is Released: 2023-05-12.\n\n\n\n4. Install necessary R packages\nParticipants are required to install the following R packages from 2 sources, CRAN and Bioconductor, before the workshop day. All packages can be installed by copy and paste the following commands to RStudio console panel (in the bottom left panel of the RStudio screen), and hit the Enter key. Make sure your computer is already connected to the Internet.\n\n\n\nCopy and paste the installation commands to the console.\n\n\n4.1 Install packages from CRAN:\n\nif (!require(\"pacman\"))\n  install.packages(\"pacman\"\n  )\npacman::p_load(\n  tidyverse,\n  paletteer,\n  scales,\n  RColorBrewer,\n  ggpubr,\n  VennDiagram,\n  circlize,\n  viridis,\n  png,\n  GGally,\n  cowplot,\n  openxlsx,\n  gridExtra,\n  gtable,\n  egg,\n  ggfortify,\n  FactoMineR,\n  factoextra,\n  gridGraphics,\n  corrplot,\n  plotly,\n  agricolae,\n  ggsci\n)\n\n\n\n\nCopy and paste the installation commands to the console.\n\n\n4.2 Install packages from Bioconductor:\n\nif (!requireNamespace(\"BiocManager\", quietly = TRUE))\n  install.packages(\"BiocManager\")\n\nBiocManager::install(c(\"ComplexHeatmap\", \"DESeq2\", \n                       \"pcaExplorer\", \"EnhancedVolcano\"))\n\nüìß For technical issues regarding R packages installation, please email the issues to Prasert Yodsawat (prasert.y@outlook.com).\n\n\n\n\n\n\nOptional üìñ\n\n\n\nIn addition, users with some experience with R are beneficial. This workshop focuses on intermediate knowledge of R for managing and visualizing data. We recommend that participants familiarize themselves with the basics of R before attending this workshop. Here we also provide some online courses that would be helpful:\n\nR Programming Tutorial - Learn the Basics of Statistical Computing from freecodecamp.org\nIntroduction to R from Datacamp\nA (very) short introduction to R: The 10-page document by Torfs & Brauer with background information and exercises, plus 2 pages with a list of useful functions. Working through this document takes a couple of hours (depending on your background knowledge)."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "R Workshop 2023",
    "section": "",
    "text": "This workshop organized by Agricultural Biotech & Bioinformatics Lab, Division of Biological Science, on behalf of faculty of science, Prince of Songkla University, Hat Yai, Thailand.\n\nüìç Venue\nThe workshop will be at the room Bsc0303, Basic Science (BSc) Building (‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡∏∞‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏ó‡∏≤‡∏á‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå)\n\n\n\n\n\n\n\n\nüìß Contact\nPlease contact us if you have any questions about this workshop. We are more than happy to help you. Our team is available to provide assistance and answer any queries you may have. Please don‚Äôt hesitate to reach out.\nTo get in touch on the course, please email to jirath.nuan@gmail.com, or you can get in touch directly to our supervisor at ponsit.sat@gmail.com.\nWe‚Äôre looking forward to see you !"
  },
  {
    "objectID": "lectures/02_basic_R.html#r-vs-rstudio-1",
    "href": "lectures/02_basic_R.html#r-vs-rstudio-1",
    "title": "Basic R Programming",
    "section": "R vs RStudio (1)",
    "text": "R vs RStudio (1)\n\n\n\n\n\n\n\n\nis a language and environment for statistical computing and graphics.\nProvides a wide variety of statistical (linear and nonlinear modelling, classical statistical tests, time-series analysis, classification, clustering, etc.) and publication-quality graphical techniques. And many more!\nFREE (under GNU-GPL license).\n\n\n\n\n\n\n\n\nRstudio is an integrated development environment (IDE) of R\nProvides extensible environments for compiling other languages (e.g.¬†Python, Shell, LaTeX, etc.) and engines (e.g.¬†knitr, Jupyter, quarto, etc.)\nFREE."
  },
  {
    "objectID": "lectures/02_basic_R.html#r-vs-rstudio-2",
    "href": "lectures/02_basic_R.html#r-vs-rstudio-2",
    "title": "Basic R Programming",
    "section": "R vs RStudio (2)",
    "text": "R vs RStudio (2)\n\n\n\n\n\nNormal R GUI\n\n\n\n\n\n\nRStudio user interface and its components"
  },
  {
    "objectID": "lectures/02_basic_R.html#r-versatility",
    "href": "lectures/02_basic_R.html#r-versatility",
    "title": "Basic R Programming",
    "section": "R: versatility",
    "text": "R: versatility"
  },
  {
    "objectID": "lectures/02_basic_R.html#accessing-help-documentation-in-rstudio",
    "href": "lectures/02_basic_R.html#accessing-help-documentation-in-rstudio",
    "title": "Basic R Programming",
    "section": "Accessing Help & Documentation in RStudio",
    "text": "Accessing Help & Documentation in RStudio\n\n\nRStudio provides built-in documentation of all functions you have installed from libraries. For example, you would like to access documentation page of function aov, simply type in the console as follows:\n\nhelp(aov)\n# or \n?aov\n\nYou can access this documentation from the Help pane. The documentation includes an explanation of the arguments, background theorem, and references for the function aov.\n\n\n\n\n\n\nTip\n\n\nThere are 2 recommended repositories allow you to access all documentation online, RDocumentation.org and rdrr.io. These repositories contain all the documentation for all the functions available in R, even if you have never installed it!"
  },
  {
    "objectID": "lectures/02_basic_R.html#data-types",
    "href": "lectures/02_basic_R.html#data-types",
    "title": "Basic R Programming",
    "section": "Data types",
    "text": "Data types\nR has 5 data types:\n\n\n\nCharacter\n\n\na &lt;- c(\"May\", \"June\", \"July\")\nclass(a)\n\n[1] \"character\"\n\n\n\nNumeric\n\n\nb &lt;- c(-2.25, -1.5, 0, 1.0, 2.75, 3/4)\nclass(b)\n\n[1] \"numeric\"\n\n\n\nInteger\n\n\nc &lt;- as.integer(b)\nc\n\n[1] -2 -1  0  1  2  0\n\nclass(c)\n\n[1] \"integer\"\n\n\n\n\nLogical\n\nd &lt;- c(TRUE, FALSE, TRUE, FALSE)\nclass(d)\n\n[1] \"logical\"\n\n\nComplex\n\n\ne &lt;- 1+4i\nclass(e)\n\n[1] \"complex\"\n\n\n\n\n\n\n\n\nInfo\n\n\nR provides many functions to examine features of vectors and other objects, for example\n\nclass() - what kind of object is it?\nlength() - how long is it? What about two dimensional objects?"
  },
  {
    "objectID": "lectures/02_basic_R.html#data-structure-1",
    "href": "lectures/02_basic_R.html#data-structure-1",
    "title": "Basic R Programming",
    "section": "Data structure (1)",
    "text": "Data structure (1)\n\n\n\nVectors\nis a row of strings (can be numbers, characters, logicals , or mix of it), and also known as a 1-dimensional array. R uses function c to declare vectors:\n\nx &lt;- c(1, 4, 6, 8, 10)\n# Inspect vector\nx\n\n[1]  1  4  6  8 10\n\n# Access element in vector\nx[2]\n\n[1] 4\n\n# Calculating vector\nsum(x)\n\n[1] 29\n\n# Add another vector\ny &lt;- c(2, -2, 4, 9, 0.5)\ny\n\n[1]  2.0 -2.0  4.0  9.0  0.5\n\n# Calculating vector\nz &lt;- x + y\nz\n\n[1]  3.0  2.0 10.0 17.0 10.5\n\n\n\n\n\nMatrices\nis a 2-dimensional array, we use the function matrix to declare matrix in R as follow.\n\nmat &lt;- matrix(data = c(9, 2, 3, 4, 5, 6), nrow = 3)\n# Inspecting matrix\nmat\n\n     [,1] [,2]\n[1,]    9    4\n[2,]    2    5\n[3,]    3    6\n\n# Accessing element in 1st row, 2nd column of the matrix\nmat[1,2]\n\n[1] 4\n\n# Multiply matrix by 10\nmat*10\n\n     [,1] [,2]\n[1,]   90   40\n[2,]   20   50\n[3,]   30   60\n\n# Replace value in 3rd row, 1st column of the matrix to 20\nmat[3,1] &lt;- 20\nmat\n\n     [,1] [,2]\n[1,]    9    4\n[2,]    2    5\n[3,]   20    6"
  },
  {
    "objectID": "lectures/02_basic_R.html#data-structures-2",
    "href": "lectures/02_basic_R.html#data-structures-2",
    "title": "Basic R Programming",
    "section": "Data structures (2)",
    "text": "Data structures (2)\n\n\n\nData frames\nA data frame is a matrix in which rows and columns are named. A data frame is more flexible and compatible for further data manipulation and export as a spreadsheet. Also, data frame can be calculated like matrix.\n\n# Create a data frame\nt &lt;- data.frame(\n  name = c(\"gene1\", \"gene2\", \"gene3\", \"gene4\"),\n  cond_1 = c(20, 18, 0, 0),\n  cond_2 = c(1, 2, 100, 120)\n)\n# Access element in data frame\nt[4, 3]\n\n[1] 120\n\n# See how many rows and columns in the data frame\ndim(t)\n\n[1] 4 3\n\n# See what type of data format in each column\nstr(t)\n\n'data.frame':   4 obs. of  3 variables:\n $ name  : chr  \"gene1\" \"gene2\" \"gene3\" \"gene4\"\n $ cond_1: num  20 18 0 0\n $ cond_2: num  1 2 100 120\n\n\n\n\n\nLists\nList is a complex object that can store all data types and structures, even list within list!\n\nL1 &lt;- list(one = 1,\n           two = c(1, 2),\n           five = seq(0, 1, length = 5))\n# Inspect the list\nL1\n\n$one\n[1] 1\n\n$two\n[1] 1 2\n\n$five\n[1] 0.00 0.25 0.50 0.75 1.00\n\n# Access the 3rd structure in a list\nL1[3]\n\n$five\n[1] 0.00 0.25 0.50 0.75 1.00\n\n## Access the 2nd child element of the 3rd structure of the list\nL1[[3]][2]\n\n[1] 0.25\n\n# Calculating the list\nL1$five * 10\n\n[1]  0.0  2.5  5.0  7.5 10.0"
  },
  {
    "objectID": "lectures/02_basic_R.html#data-frames-1",
    "href": "lectures/02_basic_R.html#data-frames-1",
    "title": "Basic R Programming",
    "section": "Data frames (1)",
    "text": "Data frames (1)\nData frame is a key data structure in R and statistics.\n\nEach row represents observation (genes, protein, taxon, name)\nEach column represents variable (measures, treatments, characteristics) of the observation\nEach value in a cell represents each data point.\n\n\nStructure of data frame. Redraw from R for Data Science 2nd edition (Hadley Wickham & Garrett Grolemund)."
  },
  {
    "objectID": "lectures/02_basic_R.html#data-frames-2",
    "href": "lectures/02_basic_R.html#data-frames-2",
    "title": "Basic R Programming",
    "section": "Data frames (2)",
    "text": "Data frames (2)\nWe‚Äôll show structure of the data frames in 2 formats; wide and long formats, using airquality dataset.\n\n\nWide format\n\ndt_wide &lt;- datasets::airquality\n# Show how the data looks like\nhead(dt_wide)\n\n\n\n\n\n\nOzone\nSolar.R\nWind\nTemp\nMonth\nDay\n\n\n\n\n41\n190\n7.4\n67\n5\n1\n\n\n36\n118\n8.0\n72\n5\n2\n\n\n12\n149\n12.6\n74\n5\n3\n\n\n18\n313\n11.5\n62\n5\n4\n\n\nNA\nNA\n14.3\n56\n5\n5\n\n\n28\nNA\n14.9\n66\n5\n6\n\n\n\n\n\n\n\n\nHuman-readable data frame\nElegance\nEasy to see all values in each observation\nOne observation is one row\nMay incompatible for some plots in ggplot2\n\n\nLong format\n\ndt_long &lt;- datasets::airquality %&gt;%\n  pivot_longer(!c(Day, Month))\n# Show how the data looks like\nhead(dt_long)\n\n\n\n\n\n\nMonth\nDay\nname\nvalue\n\n\n\n\n5\n1\nOzone\n41.0\n\n\n5\n1\nSolar.R\n190.0\n\n\n5\n1\nWind\n7.4\n\n\n5\n1\nTemp\n67.0\n\n\n5\n2\nOzone\n36.0\n\n\n5\n2\nSolar.R\n118.0\n\n\n\n\n\n\n\n\nMachine-readable data frame\nSimple\nEach observation can be more than one row\nCompatible to include with metadata table (if any)\nggplot2 ‚ù§Ô∏èlong-format data frame"
  },
  {
    "objectID": "lectures/02_basic_R.html#managing-data-frames-with-dplyr",
    "href": "lectures/02_basic_R.html#managing-data-frames-with-dplyr",
    "title": "Basic R Programming",
    "section": "Managing data frames with dplyr",
    "text": "Managing data frames with dplyr\nWe can handle data frames with base R, but when you are working with a large data set, speed matters. The dplyr package provides a ‚Äúgrammar‚Äù (especially verbs) for data manipulation and for editing data frames.\nFrequently used dplyr verbs:\n\nglimpse: skim structure of the data, see every columns in a data frame.\nselect: return a subset of the columns of a data frame, using a flexible notation.\nfilter: extract a subset of rows from a data frame based on logical conditions.\narrange: reorder rows of a data frame.\nrename: rename variables in a data frame.\nmutate: add new variables/columns or transform existing variables.\nsummarise / summarize: generate summary statistics of different variables in the data frame, possibly within strata.\n%&gt;%: the ‚Äúpipe‚Äù operator, is used to connect multiple verb actions together into a pipeline."
  },
  {
    "objectID": "lectures/02_basic_R.html#common-dplyr-function-properties",
    "href": "lectures/02_basic_R.html#common-dplyr-function-properties",
    "title": "Basic R Programming",
    "section": "Common dplyr Function Properties",
    "text": "Common dplyr Function Properties\n\nThe first argument must be a data frame to process.\nThe subsequent arguments describe what to do with the data frame specified in the first argument, and you can refer to columns in the data frame directly without using the $ operator (just use the column names).\nThe return result of a function is a new data frame\n\nFor example:\n\n# Load dplyr library\nlibrary(dplyr)\n# Load airquality dataset\ndt &lt;- datasets::airquality\ndt_filtered &lt;- filter(dt, Solar.R &gt; 300)\n# Show how the data looks like\nhead(dt_filtered)\n\n  Ozone Solar.R Wind Temp Month Day\n1    18     313 11.5   62     5   4\n2    14     334 11.5   64     5  16\n3    34     307 12.0   66     5  17\n4    30     322 11.5   68     5  19\n5    11     320 16.6   73     5  22\n6    39     323 11.5   87     6  10"
  },
  {
    "objectID": "lectures/02_basic_R.html#dplyrglimpse",
    "href": "lectures/02_basic_R.html#dplyrglimpse",
    "title": "Basic R Programming",
    "section": "dplyr::glimpse",
    "text": "dplyr::glimpse\n\nCreate new variable dt_iris that stored the data set ‚Äúiris‚Äù.\n\n\n# Load dataset 'iris'\ndt_iris &lt;- datasets::iris\n\n\nGlimpse the data set in dt_iris\n\n\n# glimpse data\nglimpse(dt_iris)\n\n\nThree species of iris flowers in this data set: setosa, versicolor, and virginica. Figure from https://www.embedded-robotics.com/iris-dataset-classification."
  },
  {
    "objectID": "lectures/02_basic_R.html#dplyrselect",
    "href": "lectures/02_basic_R.html#dplyrselect",
    "title": "Basic R Programming",
    "section": "dplyr::select",
    "text": "dplyr::select\n\nWe already have data frame dt_iris from earlier practice. Now we will select columns name Species, and Petal.Width from dt and store in new variable: dt_sel\n\n\n# Select columns Petal.Width and Species from dt, keep in dt_sel\ndt_sel &lt;- select(dt_iris, Species, Petal.Width)\n\n\nThe glimpse the result.\n\n\n# Check the result by glimpse\nglimpse(dt_sel)"
  },
  {
    "objectID": "lectures/02_basic_R.html#dplyrfilter",
    "href": "lectures/02_basic_R.html#dplyrfilter",
    "title": "Basic R Programming",
    "section": "dplyr::filter",
    "text": "dplyr::filter\nfilter() is used to subset a data frame, retaining all rows that satisfy your conditions.\nFrom the data set iris stored in data frame dt_iris,\n\nNow we will filter Species ‚Äòversicolor‚Äô.\n\n\n# Filter versicolor species in dt_iris\ndt_versicolor &lt;- filter(dt_iris, Species == \"versicolor\")\n# Glimpse the result\nglimpse(dt_versicolor)\n\n\nFrom dt_versicolor, filter the flowers that the Sepal.Length longer than or equal to 6\n\n\n# Filter the versicolor iris that the sepal length longer than or equal to 6\ndt_vsc_filt &lt;- filter(dt_versicolor, Sepal.Length &gt;= 6)\n\n\nThen glimpse the result\n\n\n# Glimpse the result\nglimpse(dt_vsc_filt)"
  },
  {
    "objectID": "lectures/02_basic_R.html#dplyrarrange",
    "href": "lectures/02_basic_R.html#dplyrarrange",
    "title": "Basic R Programming",
    "section": "dplyr::arrange",
    "text": "dplyr::arrange\narrange() orders the rows of a data frame by the values of selected columns.\n\nIn our filtered data frame dt_vsc_filt, sort the Sepal.Length column.\n\n\n# Sort data frame dt_vsc_filt by sepal length column (ascendingly)\ndt_vsc_filt_srt &lt;- arrange(dt_vsc_filt, Sepal.Length)\n\n\nThen, sort the Petal.Length descendingly.\n\n\n# Sort data frame dt_vsc_filt descendingly by petal length column\ndt_vsc_filt_srt &lt;- arrange(dt_vsc_filt, desc(Petal.Length))\n\n\nGlimpse the result\n\n\nglimpse(dt_vsc_filt_srt)"
  },
  {
    "objectID": "lectures/02_basic_R.html#dplyrrename",
    "href": "lectures/02_basic_R.html#dplyrrename",
    "title": "Basic R Programming",
    "section": "dplyr::rename",
    "text": "dplyr::rename\nrename() changes the names of individual variables using new_name = old_name syntax.\n\nFrom sorted and filtered data frame dt_vsc_filt_srt, we will rename 2 columns, from Sepal.Length and Petal.Length, to SL and PL, respectively. Then save to the new data frame dt_vsc_renamed.\n\n\n# Rename column from Sepal.Length to SL, and Petal.Length to PL, then save to the new data frame dt_vsc_renamed\ndt_vsc_renamed &lt;- rename(dt_vsc_filt_srt, \n                         SL = Sepal.Length,\n                         PL = Petal.Length)"
  },
  {
    "objectID": "lectures/02_basic_R.html#dplyrmutate",
    "href": "lectures/02_basic_R.html#dplyrmutate",
    "title": "Basic R Programming",
    "section": "dplyr::mutate",
    "text": "dplyr::mutate\nmutate() creates new columns that are functions of existing variables, as well as modify and delete columns.\n\nFrom the previous data frame dt_vsc_renamed, we‚Äôll calculate the difference between sepal length SL and petal length PL to the new column Len_Diff. This can be done with the mutate() function as follow.\n\n\n# Calculate difference of sepal length and petal length, add to the new column Len_Diff\ndt_vsc_renamed &lt;- mutate(dt_vsc_renamed,\n                         Len_Diff = SL - PL)\n\n\nThen, use function summary() to see the distribution of the values using the column ___________.\n\n\n# Rough summarize the difference of sepal length and petal length \nsummary(dt_vsc_renamed$________)\n\nExpected result:\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n    0.9     1.5     1.9     1.8     2.0     2.3"
  },
  {
    "objectID": "lectures/02_basic_R.html#dplyr",
    "href": "lectures/02_basic_R.html#dplyr",
    "title": "Basic R Programming",
    "section": "dplyr::%>%",
    "text": "dplyr::%&gt;%\nThe pipeline operator %&gt;% (pronounce: pipe) is very handy for bundling dplyr verbs and creating complex syntax for processing data. For example:\n\nInstead of using dplyr verbs and storing the new variables line by line, we can bundle them and use %&gt;%. All operations associated with %&gt;% are stored in one variable.\n\n\niris_df &lt;- datasets::iris %&gt;% \n  rename(SL = Sepal.Length,\n         SW = Sepal.Width,\n         PL = Petal.Length,\n         PW = Petal.Width) %&gt;% \n  mutate(Len_Diff = SL - PL) %&gt;% \n  filter(Len_Diff &gt; 1)\n\nFrom the syntax above:\n\nWe loaded the iris data set to the variable iris_df.\nThen rename the column name with rename() function.\nThen calculate the difference of sepal length and petal length using mutate() function.\nAnd keep the difference that are greater than 1 using filter() function.\nAll of these verbs are operated and store in one variable, iris_df."
  },
  {
    "objectID": "lectures/02_basic_R.html#dplyrsummarize",
    "href": "lectures/02_basic_R.html#dplyrsummarize",
    "title": "Basic R Programming",
    "section": "dplyr::summarize",
    "text": "dplyr::summarize\nsummarise() returns one row for each combination of grouping variables. It will contain one column for each grouping variable and one column for each of the summary statistics that you have specified.\n\nWe‚Äôll load original datasets::iris to the new data frame dt2_iris.\n\n\n# Load iris dataset\ndt2_iris &lt;- datasets::iris\n# glimpse data\nglimpse(dt2_iris)\n\n\nOf these 3 species, calculate mean and standard deviation of petal length using mean() and sd(), respectively. Then calculate the standard deviation of mean (SEM) of the petal length.\n\n\\[\nSEM = \\frac{SD}{\\sqrt{n}}\n\\]\n\n\n\ndt2_iris &lt;- datasets::iris %&gt;%\n  group_by(Species) %&gt;%\n  summarise(\n    num_flowers = n(),\n    Mean_PL = ______________,\n    SD_PL = ______________) %&gt;% \n  mutate(SEM_PL = ______________)\n\n\n\n\n\n\n\nSpecies\nnum_flowers\nMean_PL\nSD_PL\nSEM_PL\n\n\n\n\nsetosa\n50\n1.462\n0.1736640\n0.0245598\n\n\nversicolor\n50\n4.260\n0.4699110\n0.0664554\n\n\nvirginica\n50\n5.552\n0.5518947\n0.0780497"
  },
  {
    "objectID": "lectures/02_basic_R.html#plotting-systems-in-r",
    "href": "lectures/02_basic_R.html#plotting-systems-in-r",
    "title": "Basic R Programming",
    "section": "Plotting systems in R",
    "text": "Plotting systems in R\nPlotting is an important tool for understanding data properties, finding patterns in the data, suggesting modeling strategies for our data, and communicating what we have found in our data. Many plotting systems available in R such as:\n\nBase graphic conventional way, same as implementing graphical visualizations in the S language. You can only draw on the plot, and append another plot to it.\nGrid graphic or Grobs (graphical objects), not used to create statistical graphs per se, but are insanely useful in combining and laying out multiple graphic devices.\nLattice Plots uses lattice graphics to implement the Trellis graphics system. Also known as an improved version of Base Plot.\nggplot2 improves base and lattice graphics. The graphics are drawn using grids, which allows you to manipulate their appearance at many levels.\nhtmlwidgets provides a common framework for accessing web visualization tools from R. Userful for creating interactive plots for publishing on websites.\nplotly is a popular javascript visualization toolkit with an R interface. It is a great tool if you want to create interactive graphics for HTML documents or websites.\n\nAnother graphic systems, ComplexHeatmap (Gu 2022), will be used in this workshop as well."
  },
  {
    "objectID": "lectures/02_basic_R.html#base-graphics-1",
    "href": "lectures/02_basic_R.html#base-graphics-1",
    "title": "Basic R Programming",
    "section": "Base graphics (1)",
    "text": "Base graphics (1)\nUsing library graphics, plain and simple plot functions in R is usually called R base plot. The syntax is shown as follow:\n\n\n\nplot(rnorm(100), type = \"p\", col = \"red\")\n\n\n\n\nThis is a scatter plot showing 100 random numbers. Each red point indicates a data point.\n\n\nhist(rnorm(100))\n\n\n\n\nAnother simple plot to show the pattern of the data is histogram."
  },
  {
    "objectID": "lectures/02_basic_R.html#base-graphics-2",
    "href": "lectures/02_basic_R.html#base-graphics-2",
    "title": "Basic R Programming",
    "section": "Base graphics (2)",
    "text": "Base graphics (2)\nThe following lines create a plot from data frame t.\n\n# Creating a data frame\nt &lt;- data.frame(x = c(11,12,14), \n                y = c(19,20,21), \n                z = c(10,9,7))\n# Creating a new plot\nplot(t$x, type = \"b\", ylim = range(t), col = \"red\")\n# Adding new graphic to the plot\nlines(t$y, type = \"s\", col = \"blue\")\n# Adding another graphic to the plot\npoints(t$z, pch = 20, cex = 2, col = \"green\")"
  },
  {
    "objectID": "lectures/02_basic_R.html#lattice-graphic",
    "href": "lectures/02_basic_R.html#lattice-graphic",
    "title": "Basic R Programming",
    "section": "Lattice graphic",
    "text": "Lattice graphic\nAttempts to improve R‚Äôs basic graphs by providing better presets and the ability to display multivariate relationships. In particular, the package supports the creation of grid graphs - graphs that show a variable or the relationship between variables as a function of one or more other variables.\n\n\n\n# Load package\nlibrary(lattice)\n\n# Load Toothgrowth data set\nToothGrowth &lt;- datasets::ToothGrowth\n# Density plot\ndensityplot(~ len, groups = dose, data = ToothGrowth,\n            plot.points = FALSE, auto.key = TRUE)\n\n\n\n\n\n\n# Load iris data set\ndt &lt;- datasets::iris\n# Plot scatter plot\nxyplot(Sepal.Length ~ Petal.Length | Species,\n       group = Species,\n       data = dt,\n       type = c(\"p\", \"smooth\"),\n       scales = \"free\")"
  },
  {
    "objectID": "lectures/02_basic_R.html#ggplot2",
    "href": "lectures/02_basic_R.html#ggplot2",
    "title": "Basic R Programming",
    "section": "ggplot2",
    "text": "ggplot2\nThe ggplot2 package is an R package for creating graphs or plots of statistical data. With ggplot2, you can compose graphs by combining independent components based on the Grammar of Graphics.\n\n\n\n# Load package\nlibrary(ggplot2)\n# create scatterplot of carat vs. price, \n# using cut as color variable\nggplot(data = diamonds, \n       aes(x = carat, y = price, color = cut)) +\n  geom_point()\n\n\n\n\n\n\n# Create scatterplot of price, grouped by cut\nggplot(data = diamonds, \n       aes(x = cut, y = price)) + \n  geom_boxplot(fill = \"firebrick\") +\n  theme_bw()\n\n\n\n\n\n\nWe‚Äôll mainly use ggplot2 and other graphic libraries in this workshop üôÇ"
  },
  {
    "objectID": "lectures/02_basic_R.html#tidyverse",
    "href": "lectures/02_basic_R.html#tidyverse",
    "title": "Basic R Programming",
    "section": "Tidyverse",
    "text": "Tidyverse\n\n\nTidyverse is a collection of R packages for data science. All Tidyverse packages share the same design philosophy, grammar, and data structures. The core of Tidyverse includes packages that you will use in your daily data analysis.\n¬†\n\n# Load tidyverse\nlibrary(tidyverse)\n\n\n\n\n\nCore packages in Tidyverse."
  },
  {
    "objectID": "lectures/02_basic_R.html#references",
    "href": "lectures/02_basic_R.html#references",
    "title": "Basic R Programming",
    "section": "References",
    "text": "References\n\nA (very) short introduction to R: written by Torfs & Brauer, Hydrology and Quantitative Water Management Group, Wageningen University.\nWorkshop on Data Visualization in R: by National Bioinformatics Infrastructure Sweden (NBIS), on behalf of SciLifeLab.\nR for Data Science (2nd Edition): written by Hadley Wickham, Mine √áetinkaya-Rundel, and Garrett Grolemund.\nExploratory Data Analysis with R: written by Roger D. Peng, Johns Hopkins Bloomberg School of Public Health. 2020\nggplot2: Elegant Graphics for Data Analysis (3e): written by Hadley Wickham, Danielle Navarro, and Thomas Lin Pedersen (2023).\n\n\n\n\n17 May 2023\n\n\n\nGu, Zuguang. 2022. ‚ÄúComplex Heatmap Visualization.‚Äù iMeta 1 (3). https://doi.org/10.1002/imt2.43."
  },
  {
    "objectID": "lectures/03_exploratory_data_analysis.html#eda-why",
    "href": "lectures/03_exploratory_data_analysis.html#eda-why",
    "title": "Exploratory Data Analysis",
    "section": "EDA: Why?",
    "text": "EDA: Why?\nExploratory Data Analysis (EDA) is the way to observe your data, and can be an iterative cycle since you have cleaned the data. Generally, as of Wickham, √áetinkaya-Rundel, and Grolemund (2023), aims of EDA are:\n\nGenerate questions about your data\nSearch for answers by visualizing, transforming, and modelling your data\nUse what you learn to refine your questions and/or generate new questions.\nThis is important even if you already have research questions in mind.\nTo choose the suitable means for data cleaning."
  },
  {
    "objectID": "lectures/03_exploratory_data_analysis.html#simple-steps-for-eda-in-r",
    "href": "lectures/03_exploratory_data_analysis.html#simple-steps-for-eda-in-r",
    "title": "Exploratory Data Analysis",
    "section": "10 Simple Steps for EDA in R",
    "text": "10 Simple Steps for EDA in R\nReferred from Peng (2020), here‚Äôs a quick steps to do for exploratory data analysis in R.\n\nFormulate your question\nRead in your data\nCheck the packaging\nGlimpse\nLook at the top and the bottom of the data\nCheck for the n\nValidate with at least one external data source\nTry the easy solution first\nChallenge your solution\nFollow up"
  },
  {
    "objectID": "lectures/03_exploratory_data_analysis.html#activity",
    "href": "lectures/03_exploratory_data_analysis.html#activity",
    "title": "Exploratory Data Analysis",
    "section": "Activity",
    "text": "Activity\nFor today‚Äôs EDA exercise, we will examine mortality rates by infectious and parasitic diseases. The data is adopted from the World Health Organization WHO Mortality Database. The data was collected from 1950 to 2021 in many countries around the world."
  },
  {
    "objectID": "lectures/03_exploratory_data_analysis.html#step-1-formulate-your-question",
    "href": "lectures/03_exploratory_data_analysis.html#step-1-formulate-your-question",
    "title": "Exploratory Data Analysis",
    "section": "Step 1: Formulate your question",
    "text": "Step 1: Formulate your question\nA good and sharp question or hypothesis could lead to clearing up more possible ways to answer the questions in the EDA process.\n¬†\n‚ùìCan you formulate the questions that you attempt to find the answer from this data?\n¬†\n\n\n\nTip\n\n\nThe most important questions you can answer with the EDA process is ‚ÄúDo I have the right data to answer this question?‚Äù. Though the question is difficult to answer at the beginning, the it is a good start to do EDA!"
  },
  {
    "objectID": "lectures/03_exploratory_data_analysis.html#step-2-load-your-data",
    "href": "lectures/03_exploratory_data_analysis.html#step-2-load-your-data",
    "title": "Exploratory Data Analysis",
    "section": "Step 2: Load your data",
    "text": "Step 2: Load your data\nNow we will load the data set in CSV format into R environment using read_csv() function as follows.\n¬†\n\n# Load libraries\nlibrary(tidyverse)\n# Retrieve data set\nmortality_rate &lt;- read_csv(file = \"https://raw.githubusercontent.com/JirathNuan/r-handviz-workshop/main/datasets/WHOMortalityDatabase_Infectious-and-parasitic-diseases_2023-05-03.csv\", comment = \"#\")\n\n¬†\nWhat we may have found:\n\nWas the data frame object loaded mortality_rate correctly ?\nAre there any errors/warnings during loading ?\nFrom Rstudio, how many objects and variables in data set observed from environment panel ?"
  },
  {
    "objectID": "lectures/03_exploratory_data_analysis.html#step-3-check-the-data-dimension",
    "href": "lectures/03_exploratory_data_analysis.html#step-3-check-the-data-dimension",
    "title": "Exploratory Data Analysis",
    "section": "Step 3: Check the data dimension",
    "text": "Step 3: Check the data dimension\n\nWe can check the number of rows and columns of the data frame using dim() as follows.\n\n\n# See how many rows and columns in the data\ndim(mortality_rate)\n\n¬†\nThen see the column names with colnames()\n\n# see column names\ncolnames(mortality_rate)"
  },
  {
    "objectID": "lectures/03_exploratory_data_analysis.html#step-4-glimpse-the-data",
    "href": "lectures/03_exploratory_data_analysis.html#step-4-glimpse-the-data",
    "title": "Exploratory Data Analysis",
    "section": "Step 4: Glimpse the data",
    "text": "Step 4: Glimpse the data\nAs mentioned in the R Basic Programming lecture, we can use the glimpse() function to see each column in the data frame as well as the column types and some values in that column as follow.\n¬†\n\n# Glimpse data frame\nglimpse(mortality_rate)\n\n¬†\nAs we can see from the output, glimpse() can show how many rows and columns there are, just like the dim() function. In addition, glimpse() also examine the class of each column to make sure they are specified correctly during loading."
  },
  {
    "objectID": "lectures/03_exploratory_data_analysis.html#step-5-look-at-the-top-and-the-bottom-of-the-data",
    "href": "lectures/03_exploratory_data_analysis.html#step-5-look-at-the-top-and-the-bottom-of-the-data",
    "title": "Exploratory Data Analysis",
    "section": "Step 5: Look at the top and the bottom of the data",
    "text": "Step 5: Look at the top and the bottom of the data\nOther useful functions to look at the beginning and end of the data frame are head() and tail() functions, respectively.\n¬†\n\n# Show the first 10 lines of the data frame\nhead(mortality_rate, n = 10)\n# Show the last 10 lines of the data frame\ntail(mortality_rate, n = 10)\n\n¬†\nWith these functions:\n\nWe can determine if the data was loaded correctly or not.\nWere the column names defined correctly?\nWere there no column names at all in the beginning ?\nWas the data loaded completely from the first to the last line of the file ?"
  },
  {
    "objectID": "lectures/03_exploratory_data_analysis.html#step-6-check-for-the-n",
    "href": "lectures/03_exploratory_data_analysis.html#step-6-check-for-the-n",
    "title": "Exploratory Data Analysis",
    "section": "Step 6: Check for the n",
    "text": "Step 6: Check for the n\n\nThis step is counting what you want to examine their number (n).\nIn general, counting things is a good way to find out if something is going wrong after you load the data. Whether or not duplicate values or NA are observed.\n\n\n# Counting number of countries in the data set\ncount_countries &lt;- length(unique(mortality_rate$country_name))\ncount_countries\n\n# For each country, how many data points \ntbl_countries &lt;- table(mortality_rate$country_name)\ntbl_countries\n\n# How many countries in Asia \nmortality_rate %&gt;% \n  filter(region_name == \"Asia\") %&gt;% \n  distinct(country_name) %&gt;% \n  count()\n\n# From 2000 to 2021, how many countries in Asia, where the mortality rate is available in these years. \nmortality_rate %&gt;% \n  filter(region_name == \"Asia\" &\n           year &gt;= 2000 & \n           year &lt;= 2021) %&gt;% \n  group_by(year) %&gt;% \n  count()\n\n# From the above examination, we can see in which year the mortality rate is the highest by adding arrange()\nmortality_rate %&gt;% \n  filter(region_name == \"Asia\" &\n           year &gt;= 2000 & \n           year &lt;= 2021) %&gt;% \n  group_by(year) %&gt;% \n  count() %&gt;% \n  arrange(desc(n))"
  },
  {
    "objectID": "lectures/03_exploratory_data_analysis.html#step-7-validate-with-at-least-one-external-data-source",
    "href": "lectures/03_exploratory_data_analysis.html#step-7-validate-with-at-least-one-external-data-source",
    "title": "Exploratory Data Analysis",
    "section": "Step 7: Validate with at least one external data source",
    "text": "Step 7: Validate with at least one external data source\n\nIt is very important to make sure that your data matches something outside the data set. For example, you can cross-check with mortality database from health agencies in the desired countries. This way you can make sure that the measurements are about what they should be, and it serves as a check to see what other things in your data set might be wrong.\nBased on our data, we can easily check the distribution of values with many functions, such as quantile() and summary() as follow.\n\n\n# Summarize the distribution of death rate per 100,000 populations\nsummary(mortality_rate$death_rate_per_100k)\n# Distribute to quantile rank\nquantile(mortality_rate$death_rate_per_100k, na.rm = TRUE)\n\n\nWith summary(), you can even summarize every columns in the data frame at once as follow.\n\n\n# Summarize data frame\nsummary(mortality_rate)"
  },
  {
    "objectID": "lectures/03_exploratory_data_analysis.html#step-8-try-the-easy-solution-first",
    "href": "lectures/03_exploratory_data_analysis.html#step-8-try-the-easy-solution-first",
    "title": "Exploratory Data Analysis",
    "section": "Step 8: Try the easy solution first",
    "text": "Step 8: Try the easy solution first\n\nSuppose the question we want to answer is\n\n\nSince the data collected from 1950 - 2021, which region contains the highest number of deaths ?\n\nTo answer the question, we need to group the data by region and examine what the region has the highest number of deaths.\n\n# Examining the number of deaths by region\nmortality_rate %&gt;% \n  filter(!is.na(number)) %&gt;% \n  group_by(region_name) %&gt;% \n  summarise(total_death_per_region = sum(number)) %&gt;% \n  ggplot(aes(x = region_name, y = total_death_per_region)) +\n  geom_col()\n\n\nIs it different number of death between sex in each region ?\n\n\n# Examine the number of deaths by region and sex\nmortality_rate %&gt;%\n  filter(!is.na(number)) %&gt;% \n  group_by(region_name, sex) %&gt;%\n  summarise(total_death_per_region = sum(number)) %&gt;% \n  ggplot(aes(x = region_name, y = total_death_per_region, fill = sex)) +\n  geom_col(position = position_dodge(0.9, preserve = \"single\"))"
  },
  {
    "objectID": "lectures/03_exploratory_data_analysis.html#step-9-challenge-your-solution",
    "href": "lectures/03_exploratory_data_analysis.html#step-9-challenge-your-solution",
    "title": "Exploratory Data Analysis",
    "section": "Step 9: Challenge your solution",
    "text": "Step 9: Challenge your solution\n\nTrying easy solution is good, because it fast and easy to answer the questions. But it is always better idea to challenge the results, especially if they fit with your expectations.\nEven if our simple solutions work well, but surely there are some obstacles challenge you to treat it. For example\n\nWas the data collected every year in each countries ?\nWith the past solution, how can we handle NA, or data with unknown sex ? Should it be excluded?\nDo you observe any unusual values in your data? Why did this happen?\n\n\nWe will show an example to examine the unusual values (outliers) of number of deaths.\n\n# Examining overall number of deaths by region in 10 years backward (2012 - 2021)\nmortality_rate %&gt;% \n  filter(year &gt;= 2012) %&gt;% \n  ggplot(aes(x = as.character(year), \n             y = number)) +\n  geom_boxplot() +\n  facet_wrap(. ~ region_name, scales = \"free_y\")\n\n¬†\n‚ùìAre there any unusual values in the box plot ? If so, how can we examine them more closely ?"
  },
  {
    "objectID": "lectures/03_exploratory_data_analysis.html#step-10-follow-up-questions",
    "href": "lectures/03_exploratory_data_analysis.html#step-10-follow-up-questions",
    "title": "Exploratory Data Analysis",
    "section": "Step 10: Follow up questions",
    "text": "Step 10: Follow up questions\nWe are able to formulate questions in our data and try to solve the problems in a simple and challenging way.\n¬†\nAt this point, it makes sense to ask a few follow-up questions:\n\nDo you have the right data?\nDo you need other data?\nDo you have the right question?\n\n¬†\nExploratory data analysis is designed to get you thinking about your data and your question. At this point, we can refine our question or collect relevant data, over and over to get to the truth."
  },
  {
    "objectID": "lectures/03_exploratory_data_analysis.html#wicked-fast-and-convenient-eda-package-ggally",
    "href": "lectures/03_exploratory_data_analysis.html#wicked-fast-and-convenient-eda-package-ggally",
    "title": "Exploratory Data Analysis",
    "section": "Wicked fast and convenient EDA package: GGally",
    "text": "Wicked fast and convenient EDA package: GGally\nWe can use the ggpairs() function from the GGally package1 (pronounced: g-g-ally) to get a general overview of our data. Instead of plotting relationship variables pair by pair in one plot, with ggpairs(), we can explore initial relationships or each variable in more detail.\n\n# Load GGally package \n# We asked the participants to install before the workshop\nlibrary(GGally)\n# remove some columns and tidy data\nmortality_rate_2 &lt;- mortality_rate %&gt;% \n  select(-c(country_name, age_std_death_rate_per_100k,\n            age_group, number)) %&gt;% \n  filter(year &gt;= 2012)\nmortality_rate_2$year &lt;- as.character(mortality_rate_2$year)\n# Explore relationship in our data, colored by region name\np_mortality_overview &lt;- ggpairs(mortality_rate_2, \n                                aes(colour = region_name),\n                                progress = TRUE,\n                                cardinality_threshold = 20)\n# Export plot to file\nggsave(\"mortality_rate_overview.png\", p_mortality_overview,\n       width = 20, height = 10, units = \"in\", dpi = 300, scale = 0.8)\n\nGGally: Extension to ggplot2 (https://ggobi.github.io/ggally)"
  },
  {
    "objectID": "lectures/03_exploratory_data_analysis.html#practice",
    "href": "lectures/03_exploratory_data_analysis.html#practice",
    "title": "Exploratory Data Analysis",
    "section": "Practice",
    "text": "Practice\nPerform EDA on BLASTN result.\nJump to qmd html."
  },
  {
    "objectID": "lectures/03_exploratory_data_analysis.html#references",
    "href": "lectures/03_exploratory_data_analysis.html#references",
    "title": "Exploratory Data Analysis",
    "section": "References",
    "text": "References\n\n\nPeng, Roger D. 2020. Exploratory Data Analysis with r. https://bookdown.org/rdpeng/exdata/.\n\n\nWickham, Hadley, Mine √áetinkaya-Rundel, and Garrett Grolemund. 2023. R for Data Science. 2nd ed. https://r4ds.hadley.nz/.\n\n\n\n\n\n17 May 2023"
  },
  {
    "objectID": "lectures/04_grammar_of_graphics.html#what-is-grammar-of-graphics",
    "href": "lectures/04_grammar_of_graphics.html#what-is-grammar-of-graphics",
    "title": "Grammar of Graphics",
    "section": "What is Grammar of Graphics",
    "text": "What is Grammar of Graphics\n\n\n\n\n\n\n\n\n¬†\n\nData: Your input data (in long format)\nAesthetics: what makes your data visible, e.g., size, line color, variables to plot, fill color, line type, transparency, etc.\nGeometry: determines the type of plot.\nStatistics: statistical transformation of continuous data\nFacets: for splitting plot into subplots.\nCoordinates: Numeric systems to limit, breakdown, transform position of geometry.\nThemes: Overall visual of plots and customization."
  },
  {
    "objectID": "lectures/04_grammar_of_graphics.html#building-a-plot-layer-by-layer",
    "href": "lectures/04_grammar_of_graphics.html#building-a-plot-layer-by-layer",
    "title": "Grammar of Graphics",
    "section": "Building a plot layer-by-layer",
    "text": "Building a plot layer-by-layer\n\nLoad data with ggplot()\n\n\n# Load library\nlibrary(ggplot2)\n# Define data and global aesthetics\nggplot(diamonds)"
  },
  {
    "objectID": "lectures/04_grammar_of_graphics.html#building-a-plot-layer-by-layer-1",
    "href": "lectures/04_grammar_of_graphics.html#building-a-plot-layer-by-layer-1",
    "title": "Grammar of Graphics",
    "section": "Building a plot layer-by-layer",
    "text": "Building a plot layer-by-layer\n\nAdd aesthetics by aes()\n\n\n# Load library\nlibrary(ggplot2)\n# Plot diamonds\nggplot(diamonds, aes(x = carat, y = price, color = cut))"
  },
  {
    "objectID": "lectures/04_grammar_of_graphics.html#building-a-plot-layer-by-layer-2",
    "href": "lectures/04_grammar_of_graphics.html#building-a-plot-layer-by-layer-2",
    "title": "Grammar of Graphics",
    "section": "Building a plot layer-by-layer",
    "text": "Building a plot layer-by-layer\n\nAdd geometry by geom()\n\n\n# Load library\nlibrary(ggplot2)\n# Define data and global aesthetics\nggplot(diamonds, aes(x = carat, y = price, color = color)) +\n  geom_point(alpha = 0.8)"
  },
  {
    "objectID": "lectures/04_grammar_of_graphics.html#building-a-plot-layer-by-layer-3",
    "href": "lectures/04_grammar_of_graphics.html#building-a-plot-layer-by-layer-3",
    "title": "Grammar of Graphics",
    "section": "Building a plot layer-by-layer",
    "text": "Building a plot layer-by-layer\n\nAdd statistics\n\n\n# Load library\nlibrary(ggplot2)\n# Define data and global aesthetics\nggplot(diamonds, aes(x = carat, y = price, color = color)) +\n  geom_point(alpha = 0.8) +\n  stat_smooth(color = \"black\", linewidth = 0.8)"
  },
  {
    "objectID": "lectures/04_grammar_of_graphics.html#building-a-plot-layer-by-layer-4",
    "href": "lectures/04_grammar_of_graphics.html#building-a-plot-layer-by-layer-4",
    "title": "Grammar of Graphics",
    "section": "Building a plot layer-by-layer",
    "text": "Building a plot layer-by-layer\n\nAdd facets\n\n\n# Load library\nlibrary(ggplot2)\n# Define data and global aesthetics\nggplot(diamonds, aes(x = carat, y = price, color = color)) +\n  geom_point(alpha = 0.8) +\n  stat_smooth(color = \"black\", linewidth = 0.8) +\n  facet_grid(cut ~ color)"
  },
  {
    "objectID": "lectures/04_grammar_of_graphics.html#building-a-plot-layer-by-layer-5",
    "href": "lectures/04_grammar_of_graphics.html#building-a-plot-layer-by-layer-5",
    "title": "Grammar of Graphics",
    "section": "Building a plot layer-by-layer",
    "text": "Building a plot layer-by-layer\n\nAdding coordinates\n\n\n# Load library\nlibrary(ggplot2)\n# Define data and global aesthetics\nggplot(diamonds, aes(x = carat, y = price, color = color)) +\n  geom_point(alpha = 0.8) +\n  stat_smooth(color = \"black\", linewidth = 0.8) +\n  facet_grid(cut ~ color) +\n  scale_y_continuous(breaks = seq(from = 0, to = 20000, by = 10000))"
  },
  {
    "objectID": "lectures/04_grammar_of_graphics.html#building-a-plot-layer-by-layer-6",
    "href": "lectures/04_grammar_of_graphics.html#building-a-plot-layer-by-layer-6",
    "title": "Grammar of Graphics",
    "section": "Building a plot layer-by-layer",
    "text": "Building a plot layer-by-layer\n\nAdding theme\n\n\n# Load library\nlibrary(ggplot2)\n# Define data and global aesthetics\nggplot(diamonds, aes(x = carat, y = price, color = color)) +\n  geom_point(alpha = 0.8) +\n  stat_smooth(color = \"black\", linewidth = 0.8) +\n  facet_grid(cut ~ color) +\n  scale_y_continuous(breaks = seq(from = 0, to = 20000, by = 10000)) +\n  theme_bw()"
  },
  {
    "objectID": "lectures/04_grammar_of_graphics.html#aesthetics",
    "href": "lectures/04_grammar_of_graphics.html#aesthetics",
    "title": "Grammar of Graphics",
    "section": "Aesthetics",
    "text": "Aesthetics\n\nAesthetics aes() describe how variables map to visual properties or aesthetics.\nThe position of data points are described by values from x and y\nshape, size, or color styles can also be specified in aes().\n\n\nCommonly used aesthetics in data visualization: position, shape, size, color, line width, line type. Figure from Wilke (2019)"
  },
  {
    "objectID": "lectures/04_grammar_of_graphics.html#types-of-variables-used-in-aesthetics",
    "href": "lectures/04_grammar_of_graphics.html#types-of-variables-used-in-aesthetics",
    "title": "Grammar of Graphics",
    "section": "Types of Variables Used in Aesthetics",
    "text": "Types of Variables Used in Aesthetics\n\n\nContinuous variables\n\nA variable or a set of value you can measure.\nContinuous data values are values you can arbitrarily fine intermediates.\nAge, height, BMI, date, assignment score, etc.\nSometimes, series of continuous variable can be a discrete variable.\n\n\nmy_seq &lt;- seq(from = 0, to = 10, by = 1)\nclass(my_seq)\nsum(my_seq)\ncount(my_seq)\n\nmy_seq2 &lt;- as.character(my_seq)\nclass(my_seq2)\nsum(my_seq2)\ncount(my_seq2)\n\n\nDiscrete variables\n\nA variable or a set of value you can count.\nGrade (A B C D), Name, Type, number of person in a room, etc.\nSometimes a vector of a discrete variable can be classified into a kind of ordinal number. That may required before time-series plotting.\n\n\nmy_var &lt;- c(\"0_hpi\", \"12hpi\", \"Control\", \"48_hpi\", \"24_hpi\")\nmy_var\n\nmy_var_2 &lt;- factor(my_var, \n                   levels = c(\"Control\", \"0_hpi\", \"12hpi\",\n                              \"24_hpi\", \"48_hpi\"))\nmy_var_2"
  },
  {
    "objectID": "lectures/04_grammar_of_graphics.html#geoms",
    "href": "lectures/04_grammar_of_graphics.html#geoms",
    "title": "Grammar of Graphics",
    "section": "Geoms",
    "text": "Geoms\nFrequently used geoms (Explore more plot in R Graph Gallery: https://r-graph-gallery.com)\n\n\n\n\n\n\nFigure¬†1: geom_histogram()\n\n\n\n\n\n\n\nFigure¬†2: geom_bar()\n\n\n\n\n\n\n\nFigure¬†3: geom_line() with geom_point()\n\n\n\n\n\n\n\nFigure¬†4: geom_boxplot() with geom_jitter()\n\n\n\n\n\n\n\n\n\nFigure¬†5: geom_violin()\n\n\n\n\n\n\n\nFigure¬†6: geom_density()\n\n\n\n\n\n\n\nFigure¬†7: geom_point() with geom_smooth()\n\n\n\n\n\n\n\nFigure¬†8: geom_tile()"
  },
  {
    "objectID": "lectures/04_grammar_of_graphics.html#position-scales-and-axes",
    "href": "lectures/04_grammar_of_graphics.html#position-scales-and-axes",
    "title": "Grammar of Graphics",
    "section": "Position scales and axes",
    "text": "Position scales and axes\nNumeric position scales\n\n\n\nLimit\n\n\nggplot(airquality, aes(x = Wind, y = Temp)) +\n  geom_point() +\n  scale_x_continuous(limits = c(0,15)) +\n  scale_y_continuous(limits = c(60,80))\n\n\n\n\n\n\nBreaks\n\n\nggplot(airquality,aes(x = Wind, y = Temp)) +\n  geom_point() +\n  scale_x_continuous(breaks = seq(from = 0, to = 20, by = 2)) +\n  scale_y_continuous(breaks = seq(from = 0, to = 100, by = 5))"
  },
  {
    "objectID": "lectures/04_grammar_of_graphics.html#position-scales-and-axes-1",
    "href": "lectures/04_grammar_of_graphics.html#position-scales-and-axes-1",
    "title": "Grammar of Graphics",
    "section": "Position scales and axes",
    "text": "Position scales and axes\nNumeric position scales (2)\n\n\n\nExpand\n\n\nggplot(airquality,\n       aes(x = Temp, \n           group = as.factor(Month), \n           fill = as.factor(Month))) +\n  geom_density(alpha = 0.6) +\n  scale_y_continuous(expand = c(0,0)) +\n  scale_x_continuous(expand = c(0,0))\n\n\n\n\n\n\nlog transformation\n\n\nggplot(diamonds,\n       aes(x = carat, y = price, color = cut)) +\n  geom_point(alpha = 0.6) +\n  scale_y_log10()"
  },
  {
    "objectID": "lectures/04_grammar_of_graphics.html#position-scales-and-axes-2",
    "href": "lectures/04_grammar_of_graphics.html#position-scales-and-axes-2",
    "title": "Grammar of Graphics",
    "section": "Position scales and axes",
    "text": "Position scales and axes\nDate-time position scale\n\n\n\nggplot(economics, aes(x = date, y = psavert)) + \n  geom_line(na.rm = TRUE) +\n  scale_x_date(date_breaks = \"15 years\")\n\n\n\n\n\n\nlim &lt;- as.Date(c(\"2004-01-01\", \"2005-01-01\"))\nggplot(economics, aes(x = date, y = psavert)) + \n  geom_line(na.rm = TRUE) +\n  scale_x_date(limits = lim, date_labels = \"%B\\n%Y\")\n\n\n\n\n\n\nDate scales behave like numeric scales, it‚Äôs ordinal, but is often more convenient to use the date_labels argument with the predefined formats. More available formatting strings: https://ggplot2-book.org/scales-position.html#sec-date-labels."
  },
  {
    "objectID": "lectures/04_grammar_of_graphics.html#position-scales-and-axes-3",
    "href": "lectures/04_grammar_of_graphics.html#position-scales-and-axes-3",
    "title": "Grammar of Graphics",
    "section": "Position scales and axes",
    "text": "Position scales and axes\nBinned position scales\n\nggplot(airquality, aes(x = Month, y = Ozone, color = Ozone)) +\n  geom_count(na.rm = TRUE) +\n  scale_y_binned(n.breaks = 10)"
  },
  {
    "objectID": "lectures/04_grammar_of_graphics.html#color-scales-and-legends",
    "href": "lectures/04_grammar_of_graphics.html#color-scales-and-legends",
    "title": "Grammar of Graphics",
    "section": "Color scales and legends",
    "text": "Color scales and legends\nColor blindness\nAvailable color palettes from package colorBlindness.\n\n# Load package\nlibrary(colorBlindness)\ndisplayAvailablePalette(color=\"white\")\n\n\nMore information on R colorBlindness package: https://cran.r-project.org/web/packages/colorBlindness/vignettes/colorBlindness.html"
  },
  {
    "objectID": "lectures/04_grammar_of_graphics.html#color-scales-and-legends-1",
    "href": "lectures/04_grammar_of_graphics.html#color-scales-and-legends-1",
    "title": "Grammar of Graphics",
    "section": "Color scales and legends",
    "text": "Color scales and legends\nContinuous color scales: viridis color palettes\n\nerupt &lt;- ggplot(faithfuld, aes(waiting, eruptions, fill = density)) +\n  geom_raster() + scale_x_continuous(NULL, expand = c(0, 0)) + scale_y_continuous(NULL, expand = c(0, 0))\n# Plot\nerupt\nerupt + scale_fill_viridis_c(option = \"viridis\")\nerupt + scale_fill_viridis_c(option = \"magma\")\nerupt + scale_fill_viridis_c(option = \"plasma\")\nerupt + scale_fill_viridis_c(option = \"rocket\")\nerupt + scale_fill_viridis_c(option = \"turbo\")\n\n\n\n\n\n\ndefault continuous palette\n\n\n\n\n\n\n\nviridis - viridis\n\n\n\n\n\n\n\nviridis - magma\n\n\n\n\n\n\n\n\n\nviridis - plasma\n\n\n\n\n\n\n\nviridis - rocket\n\n\n\n\n\n\n\nviridis - turbo"
  },
  {
    "objectID": "lectures/04_grammar_of_graphics.html#color-scales-and-legends-2",
    "href": "lectures/04_grammar_of_graphics.html#color-scales-and-legends-2",
    "title": "Grammar of Graphics",
    "section": "Color scales and legends",
    "text": "Color scales and legends\nContinuous color scales: distiller color palettes\n\nerupt + scale_fill_distiller(palette = \"RdBu\")\nerupt + scale_fill_distiller(palette = \"Pastel1\")\nerupt + scale_fill_distiller(palette = \"OrRd\")\n\n\n\n\n\n\ndistiller - Diverging\n\n\n\n\n\n\n\ndistiller - Qualitative\n\n\n\n\n\n\n\ndistiller - Sequential\n\n\n\n\n\n\nThe distiller scales applied brewer color palettes by by smoothly interpolating 7 colors from any palette to a continuous scale. For more brewer color palettes, see https://colorbrewer2.org."
  },
  {
    "objectID": "lectures/04_grammar_of_graphics.html#color-scales-and-legends-3",
    "href": "lectures/04_grammar_of_graphics.html#color-scales-and-legends-3",
    "title": "Grammar of Graphics",
    "section": "Color scales and legends",
    "text": "Color scales and legends\nContinuous color scales: ggsci color palettes\n\nlibrary(ggsci)\ndt_hm &lt;- scale(as.matrix(mtcars)[1:10, ], center = TRUE, scale = TRUE)\np_hm &lt;- as.data.frame(dt_hm) %&gt;% rownames_to_column(var = \"cars\") %&gt;% \n  pivot_longer(!cars) %&gt;%\n  ggplot(aes(x = name, y = cars, fill = value)) +\n  geom_tile(color = \"black\") +\n  coord_equal() +\n  labs(x=NULL, y = NULL) +\n  theme(legend.position = \"none\",\n        axis.text.x = element_blank())\n\np_hm\np_hm + scale_fill_gsea()\np_hm + scale_fill_material(\"yellow\")\np_hm + scale_fill_material(\"grey\")\n\n\n\n\n\n\nDefault heatmap color\n\n\n\n\n\n\n\nggsci - GSEA\n\n\n\n\n\n\n\nggsci - material (red)\n\n\n\n\n\n\n\nggsci - material (grey)\n\n\n\n\n\n\nDiscover more continuous ggsci color palette: https://cran.r-project.org/web/packages/ggsci/vignettes/ggsci.html"
  },
  {
    "objectID": "lectures/04_grammar_of_graphics.html#color-scales-and-legends-4",
    "href": "lectures/04_grammar_of_graphics.html#color-scales-and-legends-4",
    "title": "Grammar of Graphics",
    "section": "Color scales and legends",
    "text": "Color scales and legends\nMore Continuous color scales: paletteer color palettes\n\nerupt + scale_fill_paletteer_c(\"ggthemes::Green-Blue Diverging\")\nerupt + scale_fill_paletteer_c(\"ggthemes::Red-Blue-White Diverging\")\nerupt + scale_fill_paletteer_c(\"ggthemes::Temperature Diverging\")\nerupt + scale_fill_paletteer_c(\"grDevices::rainbow\")\nerupt + scale_fill_paletteer_c(\"grDevices::heat.colors\")\nerupt + scale_fill_paletteer_c(\"grDevices::Viridis\")\n\n\n\n\n\n\nggthemes::Green-Blue Diverging\n\n\n\n\n\n\n\nggthemes::Red-Blue-White Diverging\n\n\n\n\n\n\n\nggthemes::Temperature Diverging\n\n\n\n\n\n\n\n\n\ngrDevices::rainbow\n\n\n\n\n\n\n\ngrDevices::heat.colors\n\n\n\n\n\n\n\ngrDevices::Viridis\n\n\n\n\n\n\nMore continuous paletteer color palettes can be found at: https://pmassicotte.github.io/paletteer_gallery."
  },
  {
    "objectID": "lectures/04_grammar_of_graphics.html#color-scales-and-legends-5",
    "href": "lectures/04_grammar_of_graphics.html#color-scales-and-legends-5",
    "title": "Grammar of Graphics",
    "section": "Color scales and legends",
    "text": "Color scales and legends\nDiscrete color scales: default palette\n\ndf &lt;- data.frame(x = c(\"a\", \"b\", \"c\", \"d\",\"e\"), y = c(3, 4, 1, 2,5))\nbars &lt;- ggplot(df, aes(x, y, fill = x)) + \n  geom_bar(stat = \"identity\", color = \"black\") + \n  labs(x = NULL, y = NULL) +\n  theme(legend.position = \"none\")\n\nbars\nbars + scale_fill_hue()"
  },
  {
    "objectID": "lectures/04_grammar_of_graphics.html#color-scales-and-legends-6",
    "href": "lectures/04_grammar_of_graphics.html#color-scales-and-legends-6",
    "title": "Grammar of Graphics",
    "section": "Color scales and legends",
    "text": "Color scales and legends\nDiscrete color scales: RColorBrewer palettes\n\nbars + scale_fill_brewer(palette = \"BrBG\")\nbars + scale_fill_brewer(palette = \"RdYlGn\")\nbars + scale_fill_brewer(palette = \"Dark2\")\n\n\n\n\n\n\nDiverging - BrBG\n\n\n\n\n\n\n\nDiverging - RdYlGn\n\n\n\n\n\n\n\nSequential - Dark2\n\n\n\n\n\n\nInteractive RColorBrewer picker: https://colorbrewer2.org"
  },
  {
    "objectID": "lectures/04_grammar_of_graphics.html#color-scales-and-legends-7",
    "href": "lectures/04_grammar_of_graphics.html#color-scales-and-legends-7",
    "title": "Grammar of Graphics",
    "section": "Color scales and legends",
    "text": "Color scales and legends\nDiscrete color scales: ggsci palettes\nggsci offers high-quality color palettes based on color schemes used in scientific journals, data visualization libraries, and science fiction movies.\n\nbars + scale_fill_aaas()\nbars + scale_fill_npg()\nbars + scale_fill_nejm()\nbars + scale_fill_frontiers()\nbars + scale_fill_rickandmorty()\nbars + scale_fill_flatui()\nbars + scale_fill_startrek()\nbars + scale_fill_simpsons()\n\n\n\n\n\n\nInspired by Science\n\n\n\n\n\n\n\nInspired by Nature\n\n\n\n\n\n\n\nInspired by NEJM\n\n\n\n\n\n\n\nInspired by Frontiers\n\n\n\n\n\n\n\n\n\nInspired by Rick & Morty\n\n\n\n\n\n\n\nInspired by Flat UI design\n\n\n\n\n\n\n\nInspired by Startrek\n\n\n\n\n\n\n\nInspired by The Simpsons"
  },
  {
    "objectID": "lectures/04_grammar_of_graphics.html#color-scales-and-legends-8",
    "href": "lectures/04_grammar_of_graphics.html#color-scales-and-legends-8",
    "title": "Grammar of Graphics",
    "section": "Color scales and legends",
    "text": "Color scales and legends\nMore discrete color scales from paletteer\n\nbars + scale_fill_paletteer_d(\"awtools::bpalette\")\nbars + scale_fill_paletteer_d(\"basetheme::ink\")\nbars + scale_fill_paletteer_d(\"calecopal::kelp1\")\nbars + scale_fill_paletteer_d(\"fishualize::Centropyge_loricula\")\n\n\n\n\n\n\nawtools::bpalette\n\n\n\n\n\n\n\nbasetheme::ink\n\n\n\n\n\n\n\ncalecopal::kelp1\n\n\n\n\n\n\n\nfishualize::Centropyge_loricula\n\n\n\n\n\n\nInteractive discrete paletteer color palette: https://emilhvitfeldt.github.io/r-color-palettes/discrete.html"
  },
  {
    "objectID": "lectures/04_grammar_of_graphics.html#color-scales-and-legends-9",
    "href": "lectures/04_grammar_of_graphics.html#color-scales-and-legends-9",
    "title": "Grammar of Graphics",
    "section": "Color scales and legends",
    "text": "Color scales and legends\nManual discrete color scale\n\nbars + \n  scale_fill_manual(values = c(\"sienna1\", \"sienna4\", \n                               \"hotpink1\", \"hotpink4\", \"salmon\"))\nbars + scale_fill_manual(values = c(\"a\" = \"#C62828\", \"b\" = \"#9C27B0\",\n                                    \"c\" = \"#2196F3\", \"d\" = \"#4CAF50\",\n                                    \"e\" = \"#FF9800\"))"
  },
  {
    "objectID": "lectures/04_grammar_of_graphics.html#color-scales-and-legends-10",
    "href": "lectures/04_grammar_of_graphics.html#color-scales-and-legends-10",
    "title": "Grammar of Graphics",
    "section": "Color scales and legends",
    "text": "Color scales and legends\nAlpha\nThe alpha scale maps shade transparency to a numerical value.\n\nggplot(faithfuld, aes(waiting, eruptions, alpha = density)) +\n  geom_raster(fill = \"maroon\") +\n  scale_x_continuous(expand = c(0, 0)) + \n  scale_y_continuous(expand = c(0, 0))\nggplot(mtcars, aes(x = disp, y = mpg)) +\n  geom_point(size = 4, alpha = 0.3, color = \"blue\")"
  },
  {
    "objectID": "lectures/04_grammar_of_graphics.html#color-scales-and-legends-11",
    "href": "lectures/04_grammar_of_graphics.html#color-scales-and-legends-11",
    "title": "Grammar of Graphics",
    "section": "Color scales and legends",
    "text": "Color scales and legends\nLegend positions\n\nbars + theme(legend.position = \"left\")\nbars + theme(legend.position = \"right\")\nbars + theme(legend.position = \"top\")\nbars + theme(legend.position = \"bottom\")\nbars + theme(legend.position = \"none\")"
  },
  {
    "objectID": "lectures/04_grammar_of_graphics.html#references",
    "href": "lectures/04_grammar_of_graphics.html#references",
    "title": "Grammar of Graphics",
    "section": "References",
    "text": "References\n\nggplot2: Elegant Graphics for Data Analysis (3e): written by Hadley Wickham, Danielle Navarro, and Thomas Lin Pedersen (2023).\nIntroduction to data visualisation with ggplot2 Workshop: by QCBS R Workshop Series, 2023-04-24\nFundamentals of Data Visualization: by Claus O. Wilke, 2019\n\n\n\n\n17 May 2023\n\n\n\nWilke, Claus O. 2019. Fundamentals of Data Visualization. https://clauswilke.com/dataviz/."
  },
  {
    "objectID": "lectures/directory_of_visualizations.html",
    "href": "lectures/directory_of_visualizations.html",
    "title": "Directory of Visualizations",
    "section": "",
    "text": "In this chapter, we‚Äôll look at some of the most common plots and charts. We‚Äôll discuss how to interpret and use these visualizations to make data-driven decisions. We‚Äôll also explore how to create these plots and charts using ggplot2 and other graphic libraries.\nThe following commands will check whether the required R libraries already installed, if not, pacman will install and load the required libraries into your environment.\n# Install pacman\nif (!require(\"pacman\"))\n  install.packages(\"pacman\"\n  )\n\n# Use pacman p_load() to install and load other R libraries\npacman::p_load(\n1  tidyverse,\n2  viridis,\n3  ggsci,\n4  ComplexHeatmap,\n5  RColorBrewer,\n6  GGally,\n7  kableExtra\n)\n\n\n1\n\nFor data management and visualization, with ggplot() inside.\n\n2\n\nProvide color palettes for continuous and discrete variables, color blindness friendly.\n\n3\n\nProvide color palettes that are inspired by scientific journals, movies, TV shows.\n\n4\n\nFor visualizing heat maps and several plots beside the heat maps. Provides more comprehensive customization over the ggplot2‚Äôs geom_tile() or base heatmap().\n\n5\n\nColor palettes for continuous and discrete variables.\n\n6\n\nExtension library of ggplot2. Simplify complex plots into small command steps. For exploratory data analysis, correlation analysis in the data.\n\n7\n\nJust for render this document."
  },
  {
    "objectID": "lectures/directory_of_visualizations.html#visualizing-amounts",
    "href": "lectures/directory_of_visualizations.html#visualizing-amounts",
    "title": "Directory of Visualizations",
    "section": "1 Visualizing Amounts",
    "text": "1 Visualizing Amounts\n\n1.1 Bar Plots\nBar plot is the most common way to visualize amounts, i.e., the number of things you have already counted. A bar plot is used to display the relationship between a numeric and a categorical variable.\nWe will create a demo data frame containing 2 columns, name and value.\n\n# Create data\ndata_1 &lt;- data.frame(name = c(\"A\", \"B\", \"C\", \"D\", \"E\"), \n                   value = c(3, 12, 5, 18, 45))\n\n\n1.1.1 Basic bar plot\nTo create bar plot with ggplot2:\n\nalways start by calling the ggplot() function.\nthen specify the data object.\nthen define aesthetics, set in the aes() function: set the categorical variable for the X axis, use the numeric for the Y axis, and fill color of the bar plot by each name.\nfinally call geom_bar(). You have to specify stat=\"identity\" for this kind of data set.\nIn this case, use labs() to change the axes names, as well as legend name.\n\n\nggplot(data_1, aes(x = name, y = value, fill = name)) +\n  geom_bar(stat = \"identity\") +\n  labs(x = \"New name\", y = \"New value\", fill = \"New lgd name\")\n\n\n\n1.1.2 Horizontal bar plot\nTo rotate the plot to another orientation, use coord_flip().\n\nggplot(data_1, aes(x = name, y = value, fill = name)) +\n  geom_bar(stat = \"identity\") +\n  labs(x = \"New name\", y = \"New value\", fill = \"New lgd name\") +\n  coord_flip()\n\n\n\n1.1.3 Bar plot with labeled text\nTo annotate number in each bar plot, add geom_text into the command and specify the variable that you want to show the text in aes() of geom_text. You can adjust the position of the labels using hjust and vjust to move the labels in horizontal and vertical directions, respectively.\n\nggplot(data_1, aes(x = name, y = value, fill = name)) +\n  geom_bar(stat = \"identity\") +\n  geom_text(aes(label = value), vjust = -0.2) +\n  labs(x = \"New name\", y = \"New value\", fill = \"New lgd name\")\n\n\n\n\n1.2 Grouped and Stacked Bar Plot\nIn the previous section, we showed how to visualize quantitative amounts in a single variable. Sometimes we‚Äôre interested in two categorical variables at once. For example, the mock data frame data_plant that collected data from multiple plant species and multiple conditions.\n\n# create a dataset\nset.seed(123456)\ndata_plant &lt;- data.frame(\n  species = c(rep(\"sorgho\", 3),\n              rep(\"poacee\", 3),\n              rep(\"banana\", 3),\n              rep(\"triticum\", 3)),\n  condition = rep(c(\"normal\", \"stress\", \"Nitrogen\"), 4),\n  value = abs(rnorm(12, 0, 15)))\n\n\n1.2.1 Grouped bar plot\nIn the geom_bar(), use argument position=\"dodge\" to specified to have the bars one beside each other.\n\nggplot(data_plant, aes(fill = condition, y = value, x = species)) +\n  geom_bar(position = \"dodge\", stat = \"identity\")\n\n\n\n1.2.2 Small multiple bar plots\nuse facet_wrap() to create a small multiple bar plots. Each panel will defined the name by variable specified. In facet_wrap(), we can fix x and/or y axes scales using argument scales.\n\nggplot(data_plant, aes(fill = condition, y = value, x = species)) +\n  geom_bar(position = \"dodge\", stat = \"identity\") +\n  facet_wrap( ~ species, scales = \"free_x\")\n\n\n\n1.2.3 Stacked bar plot\nA stacked bar plot is very similar to the grouped bar plot above. The subgroups are just displayed on top of each other, not beside. The only thing to change to get this figure is to switch the position argument to stack.\n\nggplot(data_plant, aes(fill = condition, y = value, x = species)) +\n  geom_bar(position = \"stack\", stat = \"identity\")\n\n\n\n1.2.4 Percent stacked bar plot\nOnce more, there is not much to do to switch to a percent stacked bar plot. Just switch to position=\"fill\". Now, the percentage of each subgroup is represented, allowing to study the evolution of their proportion in the whole.\n\nggplot(data_plant, aes(fill = condition, y = value, x = species)) +\n  geom_bar(position = \"fill\", stat = \"identity\")\n\n\n\n\n1.3 Dot Plots\nOne important limitation of bars is that they need to start at zero, so that the bar length is proportional to the amount shown. For some datasets, this can be impractical or may obscure key features. In this case, we can indicate amounts by placing dots at the appropriate locations along the x or y axis.\n\n1.3.1 Simple dot plot\nWe will demonstrate a simple dot plot on the Annual Precipitation in US Cities. Load data set into R and select only top 30 most precipitated cities in the US to plot.\n\n# Prepare data of Annual Precipitation in US Cities\nUS_precip &lt;- data.frame(city = names(precip), precipitation = precip)\nUS_precip &lt;- US_precip %&gt;% \n  top_n(n = 30) %&gt;%\n  arrange(desc(precipitation))\n\n# Plot value-ordered dot plot\nggplot(US_precip, aes(x = precipitation, y = reorder(city, precipitation))) +\n  geom_point(size = 3,\n             alpha = 0.8,\n             color = \"#31688E\") +\n  labs(x = \"Average annual precipitation (in.)\", y = NULL) +\n  theme_bw()\n\n\n\n\n\n\n1.3.2 Time-series\nWe will use the USPersonalExpenditure data set. This data set consists of United States personal expenditures (in billions of dollars) in the categories; food and tobacco, household operation, medical and health, personal care, and private education for the years 1940, 1945, 1950, 1955 and 1960.\n\n# Prepare data\nUS_exp &lt;- data.frame(USPersonalExpenditure) %&gt;% \n  rownames_to_column(var = \"Category\") %&gt;% \n  pivot_longer(!Category) %&gt;% \n  mutate(name = gsub(\"X\", \"\", name)) %&gt;% \n  rename(year = name)\n\nggplot(US_exp, aes(x = year, y = value, group = Category, color = Category)) +\n  geom_line(linewidth = 0.7, color = \"black\") +\n  geom_point(size = 3) +\n  scale_color_frontiers() +\n  labs(x = \"Year\", y = \"Amount (billions dollars)\")\n\n\n\n\n1.4 Heatmaps\nAs an alternative to mapping data values onto positions via bars or dots, we can map data values onto colors. Such a figure is called a heat map. Which is a graphical representation of data where the individual values contained in a matrix are represented as colors.\n\n1.4.1 Basic Heatmap with base R\nThe heatmap() function is natively provided in R. Which required the data in a matrix format, them heatmap() is then run clustering algorithm and visualize the result with dendrogram. We cal use argument scale to normalize matrix to balance the heat colors for easy infer the trend of the data.\n\n# The mtcars dataset:\ndata &lt;- as.matrix(mtcars)\n\n# Default Heatmap\nheatmap(data)\n\n# Use 'scale' to normalize\nheatmap(data, scale=\"column\")\n\n\n\n\n\n\n1.4.2 Heatmap with geom_tile()\nWe will use USJudgeRatings data set, which reports Lawyers‚Äô Ratings of State Judges in the US Superior Court.\n\n# Prepare data\ndt_USJudgeRatings &lt;- USJudgeRatings %&gt;% \n  rownames_to_column(var = \"company\") %&gt;% \n  pivot_longer(!company)\nhead(dt_USJudgeRatings)\n\n\n# Plot\nggplot(dt_USJudgeRatings, aes(x = name, y = company, fill = value)) +\n  geom_tile() +\n  scale_fill_distiller(palette = \"Reds\") +\n  labs(x = \"Features\", y = NULL)\n\n\n\n1.4.3 Heatmap with Heatmap() of ComplexHeatmap\nComplexHeatmap visualize associations between different sources of data sets and reveal potential patterns, and provides a highly flexible way to arrange multiple heat maps and supports self-defined annotation graphics. We will use the same data set USJudgeRatings as above.\n\n# Prepare data\nmat_USJudgeRatings &lt;- as.matrix(USJudgeRatings)\n\n# Plot heatmap using ComplexHeatmap\nHeatmap(mat_USJudgeRatings,\n        row_names_gp = gpar(fontsize = 8),\n        column_names_gp = gpar(fontsize = 8),\n        column_names_rot = 30)"
  },
  {
    "objectID": "lectures/directory_of_visualizations.html#visualizing-distribution",
    "href": "lectures/directory_of_visualizations.html#visualizing-distribution",
    "title": "Directory of Visualizations",
    "section": "2 Visualizing Distribution",
    "text": "2 Visualizing Distribution\nIt‚Äôs common to want to know how a variable is distributed in a dataset. To get a better understanding of a variable, you can look at its distribution. This is usually done through visualizations such as histograms, boxplots, and density plots. These can help identify patterns and outliers in the data.\n\n2.1 Histogram\nIt is relatively straightforward to build a histogram with ggplot2 thanks to the geom_histogram() function. Only one numeric variable is needed in the input. Note that a warning message is triggered with this code: we need to take care of the bin width as explained in the next section.\n\n2.1.1 Basic histogram\nBecause histograms are generated by binning the data, their exact visual appearance depends on the choice of the bin width. Most visualization programs that generate histograms will choose a bin width by default, but chances are that bin width is not the most appropriate one for any histogram you may want to make. It is therefore critical to always try different bin widths to verify that the resulting histogram reflects the underlying data accurately. In general, if the bin width is too small, then the histogram becomes overly peaky and visually busy and the main trends in the data may be obscured. On the other hand, if the bin width is too large, then smaller features in the distribution of the data, such as the dip around age 10, may disappear.\n\ndt_hist &lt;- data.frame(value = rnorm(100))\n\nggplot(iris, aes(x = Petal.Length)) +\n  geom_histogram(fill = \"salmon\", color = \"black\")\n\nggplot(iris, aes(x = Petal.Length)) +\n  geom_histogram(fill = \"salmon\", color = \"black\", bins = 15)\n\nggplot(iris, aes(x = Petal.Length)) +\n  geom_histogram(fill = \"salmon\", color = \"black\", bins = 40)\n\nggplot(iris, aes(x = Petal.Length)) +\n  geom_histogram(fill = \"salmon\", color = \"black\", bins = 5)\n\n\n\n\n\n\n\n2.2 Density Plot\nIn a density plot, we attempt to visualize the underlying probability distribution of the data by drawing an appropriate continuous curve. This curve needs to be estimated from the data, and the most commonly used method for this estimation procedure is called kernel density estimation.\n\n2.2.1 Basic density plot\n\nggplot(iris, aes(x = Petal.Length)) +\n  geom_density(fill = \"#6DCD59\")\n\n\n\n2.2.2 Multiple density plots\n\nggplot(iris, aes(x = Petal.Length, fill = Species)) +\n  geom_density(alpha = 0.7) +\n  scale_fill_viridis_d()\n\n\n\n2.2.3 Facet density plots\n\nggplot(iris, aes(x = Petal.Length, fill = Species)) +\n  geom_density() +\n  scale_fill_viridis_d() +\n  facet_wrap(. ~ Species)\n\n\n\n\n2.3 Box Plot and Violin Plot\n\nggplot(ToothGrowth, \n       aes(x = as.factor(dose), y = len, \n           fill = as.factor(dose), group = as.factor(dose))) +\n  geom_boxplot() +\n  scale_fill_npg() +\n  geom_jitter(color=\"grey30\", size=2, alpha=0.7, width = 0.2) +\n  labs(x = \"Dose (mg/day)\", y = \"Tooth length (mm)\") +\n  theme(legend.position = \"none\")\n\n\nggplot(ToothGrowth, \n       aes(x = as.factor(dose), y = len, \n           fill = as.factor(dose), group = as.factor(dose))) +\n  geom_violin() +\n  scale_fill_npg() +\n  geom_jitter(color=\"grey30\", size=2, alpha=0.7, width = 0.2) +\n  labs(x = \"Dose (mg/day)\", y = \"Tooth length (mm)\") +\n  theme(legend.position = \"none\")\n\nggplot(ToothGrowth, \n       aes(x = as.factor(dose), y = len, \n           fill = as.factor(dose), group = as.factor(dose))) +\n  geom_violin() +\n  scale_fill_npg() +\n  geom_boxplot(fill = \"white\", width = 0.2) +\n  labs(x = \"Dose (mg/day)\", y = \"Tooth length (mm)\") +\n  theme(legend.position = \"none\")"
  },
  {
    "objectID": "lectures/directory_of_visualizations.html#visualizing-proportions",
    "href": "lectures/directory_of_visualizations.html#visualizing-proportions",
    "title": "Directory of Visualizations",
    "section": "3 Visualizing Proportions",
    "text": "3 Visualizing Proportions\n\n3.1 Pie and Donut Chart\n\n# Create Data\ndata &lt;- data.frame(\n  group=LETTERS[1:5],\n  value=c(13,7,9,21,2))\n\n# Basic piechart\nggplot(data, aes(x=\"\", y=value, fill=group)) +\n  geom_bar(stat=\"identity\", width=1, color=\"white\") +\n  coord_polar(\"y\", start=0) +\n  theme_void() # remove background, grid, numeric labels\n\n\n# Piechart with data labels\n## Compute the position of labels\ndata &lt;- data %&gt;% \n  arrange(desc(group)) %&gt;%\n  mutate(prop = value / sum(data$value) *100) %&gt;%\n  mutate(ypos = cumsum(prop)- 0.5*prop )\n\n\nggplot(data, aes(x=\"\", y=prop, fill=group)) +\n  geom_bar(stat=\"identity\", width=1, color=\"white\") +\n  coord_polar(\"y\", start=0) +\n  theme_void() + \n  theme(legend.position=\"none\") +\n  geom_text(aes(y = ypos, label = group), color = \"white\", size=6) +\n  scale_fill_brewer(palette=\"Set1\")"
  },
  {
    "objectID": "lectures/directory_of_visualizations.html#visualizing-x-y-relationships",
    "href": "lectures/directory_of_visualizations.html#visualizing-x-y-relationships",
    "title": "Directory of Visualizations",
    "section": "4 Visualizing x-y Relationships",
    "text": "4 Visualizing x-y Relationships\n\n4.1 Scatter Plot\n\n4.1.1 Basic scatter plot\n\nggplot(iris, aes(x = Petal.Width, y = Petal.Length, color = Species)) +\n  geom_point(alpha = 0.8, size = 2) +\n  labs(x = \"Petal width (cm)\",\n       y = \"Petal length (cm)\")\n\n\n\n4.1.2 Facet scatter plot\n\nggplot(iris, aes(x = Petal.Width, y = Petal.Length, color = Species)) +\n  geom_point(alpha = 0.8, size = 2) +\n  labs(x = \"Petal width (cm)\",\n       y = \"Petal length (cm)\") +\n  facet_wrap(. ~ Species)\n\n\n\n4.1.3 Scatter plot with trend line\n\nggplot(mtcars, aes(x = disp, y = mpg)) +\n  geom_point(alpha = 0.8, size = 2) +\n  geom_smooth(method = \"lm\", color = \"red\") +\n  labs(x = \"Miles/(US) gallon\",\n       y = \"Displacement (cu.in.)\")\n\n\n\n\n4.2 Correlograms\n\n# Create data \ndata &lt;- data.frame(mtcars)\n \n# Check correlation between variables\ncor(data) \n \n# visualization of correlations\nggcorr(data, method = c(\"everything\", \"pearson\")) \nggcorr(data, method = c(\"everything\", \"pearson\"), geom = \"circle\") \n\n\n\n4.3 Dimension Reduction\n\n# http://www.sthda.com/english/articles/31-principal-component-methods-in-r-practical-guide/118-principal-component-analysis-in-r-prcomp-vs-princomp/\n\nlibrary(factoextra)\nlibrary(FactoMineR)\n\nres.pca &lt;- prcomp(USArrests, scale = TRUE)\n\nfviz_eig(res.pca)\n\nfviz_pca_ind(res.pca,\n             col.ind = \"cos2\", # Color by the quality of representation\n             gradient.cols = c(\"#00AFBB\", \"#E7B800\", \"#FC4E07\"),\n             repel = TRUE     # Avoid text overlapping\n             )\n\n\nfviz_pca_var(res.pca,\n             col.var = \"contrib\", # Color by contributions to the PC\n             gradient.cols = c(\"#00AFBB\", \"#E7B800\", \"#FC4E07\"),\n             repel = TRUE     # Avoid text overlapping\n             )\n\nfviz_pca_biplot(res.pca, repel = TRUE,\n                col.var = \"#2E9FDF\", # Variables color\n                col.ind = \"#696969\"  # Individuals color\n                )"
  },
  {
    "objectID": "lectures/05_plotting_omics_data.html",
    "href": "lectures/05_plotting_omics_data.html",
    "title": "Plotting Omics Data",
    "section": "",
    "text": "Load R pakcages\nlibrary(tidyverse)\nlibrary(paletteer)\nlibrary(scales)\nlibrary(RColorBrewer)\nlibrary(ggpubr)\nlibrary(VennDiagram)\nlibrary(circlize)\nlibrary(viridis)\nlibrary(png)\nlibrary(GGally)\nlibrary(cowplot)\nlibrary(openxlsx)\nlibrary(gridExtra)\nlibrary(gtable)\nlibrary(egg)\nlibrary(ggfortify)\nlibrary(FactoMineR)\nlibrary(factoextra)\nlibrary(gridGraphics)\nlibrary(corrplot)\nlibrary(plotly)\nlibrary(agricolae)\nlibrary(ComplexHeatmap)\nlibrary(DESeq2)\nlibrary(pcaExplorer)\nlibrary(EnhancedVolcano)"
  },
  {
    "objectID": "lectures/05_plotting_omics_data.html#plotting-abundance-of-features",
    "href": "lectures/05_plotting_omics_data.html#plotting-abundance-of-features",
    "title": "Plotting Omics Data",
    "section": "1 Plotting Abundance of Features",
    "text": "1 Plotting Abundance of Features\n\n1.1 Abundance of Representative Terms\n\n\n1.2 Relative abundance"
  },
  {
    "objectID": "lectures/05_plotting_omics_data.html#principal-component-analysis",
    "href": "lectures/05_plotting_omics_data.html#principal-component-analysis",
    "title": "Plotting Omics Data",
    "section": "2 Principal Component Analysis",
    "text": "2 Principal Component Analysis\nWay 1: prcomp & normal scatter plot\nWay 2: rlogtransform & pcaexplorer"
  },
  {
    "objectID": "lectures/05_plotting_omics_data.html#hierarchical-clustering-analysis-heatmap",
    "href": "lectures/05_plotting_omics_data.html#hierarchical-clustering-analysis-heatmap",
    "title": "Plotting Omics Data",
    "section": "3 Hierarchical Clustering Analysis (Heatmap)",
    "text": "3 Hierarchical Clustering Analysis (Heatmap)\n\nset.seed(123)\nnr1 = 4; nr2 = 8; nr3 = 6; nr = nr1 + nr2 + nr3\nnc1 = 6; nc2 = 8; nc3 = 10; nc = nc1 + nc2 + nc3\nmat = cbind(rbind(matrix(rnorm(nr1*nc1, mean = 1,   sd = 0.5), nr = nr1),\n          matrix(rnorm(nr2*nc1, mean = 0,   sd = 0.5), nr = nr2),\n          matrix(rnorm(nr3*nc1, mean = 0,   sd = 0.5), nr = nr3)),\n    rbind(matrix(rnorm(nr1*nc2, mean = 0,   sd = 0.5), nr = nr1),\n          matrix(rnorm(nr2*nc2, mean = 1,   sd = 0.5), nr = nr2),\n          matrix(rnorm(nr3*nc2, mean = 0,   sd = 0.5), nr = nr3)),\n    rbind(matrix(rnorm(nr1*nc3, mean = 0.5, sd = 0.5), nr = nr1),\n          matrix(rnorm(nr2*nc3, mean = 0.5, sd = 0.5), nr = nr2),\n          matrix(rnorm(nr3*nc3, mean = 1,   sd = 0.5), nr = nr3))\n   )\nmat = mat[sample(nr, nr), sample(nc, nc)] # random shuffle rows and columns\nrownames(mat) = paste0(\"row\", seq_len(nr))\ncolnames(mat) = paste0(\"column\", seq_len(nc))\n\nlibrary(circlize)\ncol_fun = colorRamp2(c(-2, 0, 2), c(\"green\", \"white\", \"red\"))\ncol_fun(seq(-3, 3))\n\n[1] \"#00FF00FF\" \"#00FF00FF\" \"#B1FF9AFF\" \"#FFFFFFFF\" \"#FF9E81FF\" \"#FF0000FF\"\n[7] \"#FF0000FF\"\n\nHeatmap(mat, name = \"mat\", col = col_fun)"
  },
  {
    "objectID": "lectures/05_plotting_omics_data.html#volcano-plot",
    "href": "lectures/05_plotting_omics_data.html#volcano-plot",
    "title": "Plotting Omics Data",
    "section": "4 Volcano Plot",
    "text": "4 Volcano Plot\nEnhancedvolcano"
  },
  {
    "objectID": "lectures/05_plotting_omics_data.html#venn-diagram-and-upset-plot",
    "href": "lectures/05_plotting_omics_data.html#venn-diagram-and-upset-plot",
    "title": "Plotting Omics Data",
    "section": "5 Venn Diagram and Upset Plot",
    "text": "5 Venn Diagram and Upset Plot\nVenn: venndiagram\nupset: complexheatmap\n\nlibrary(ComplexHeatmap)\nset.seed(123)\nlt = list(a = sample(letters, 5),\n          b = sample(letters, 10),\n          c = sample(letters, 15))\nm1 = make_comb_mat(lt)\nUpSet(m1)"
  },
  {
    "objectID": "lectures/05_plotting_omics_data.html#plotting-diversity-indices",
    "href": "lectures/05_plotting_omics_data.html#plotting-diversity-indices",
    "title": "Plotting Omics Data",
    "section": "6 Plotting Diversity Indices",
    "text": "6 Plotting Diversity Indices\nggpubr"
  },
  {
    "objectID": "lectures/05_plotting_omics_data.html#plotting-individual-gene-expression",
    "href": "lectures/05_plotting_omics_data.html#plotting-individual-gene-expression",
    "title": "Plotting Omics Data",
    "section": "7 Plotting Individual Gene Expression",
    "text": "7 Plotting Individual Gene Expression\nggpubr"
  },
  {
    "objectID": "lectures/05_plotting_omics_data.html#circos-plot",
    "href": "lectures/05_plotting_omics_data.html#circos-plot",
    "title": "Plotting Omics Data",
    "section": "8 Circos plot",
    "text": "8 Circos plot"
  },
  {
    "objectID": "lectures/05_plotting_omics_data.html#section",
    "href": "lectures/05_plotting_omics_data.html#section",
    "title": "Plotting Omics Data",
    "section": "9 ",
    "text": "9"
  },
  {
    "objectID": "lectures/05_plotting_omics_data.html#session-info",
    "href": "lectures/05_plotting_omics_data.html#session-info",
    "title": "Plotting Omics Data",
    "section": "10 Session info",
    "text": "10 Session info\n\nsessionInfo()\n\nR version 4.3.0 (2023-04-21 ucrt)\nPlatform: x86_64-w64-mingw32/x64 (64-bit)\nRunning under: Windows 11 x64 (build 22621)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: Asia/Bangkok\ntzcode source: internal\n\nattached base packages:\n[1] stats4    grid      stats     graphics  grDevices utils     datasets \n[8] methods   base     \n\nother attached packages:\n [1] EnhancedVolcano_1.18.0      ggrepel_0.9.3              \n [3] pcaExplorer_2.26.1          DESeq2_1.40.1              \n [5] SummarizedExperiment_1.30.1 Biobase_2.60.0             \n [7] MatrixGenerics_1.12.0       matrixStats_0.63.0         \n [9] GenomicRanges_1.52.0        GenomeInfoDb_1.36.0        \n[11] IRanges_2.34.0              S4Vectors_0.38.1           \n[13] BiocGenerics_0.46.0         ComplexHeatmap_2.16.0      \n[15] agricolae_1.3-5             plotly_4.10.1              \n[17] corrplot_0.92               gridGraphics_0.5-1         \n[19] factoextra_1.0.7            FactoMineR_2.8             \n[21] ggfortify_0.4.16            egg_0.4.5                  \n[23] gtable_0.3.3                gridExtra_2.3              \n[25] openxlsx_4.2.5.2            cowplot_1.1.1              \n[27] GGally_2.1.2                png_0.1-8                  \n[29] viridis_0.6.3               viridisLite_0.4.2          \n[31] circlize_0.4.15             VennDiagram_1.7.3          \n[33] futile.logger_1.4.3         ggpubr_0.6.0               \n[35] RColorBrewer_1.1-3          scales_1.2.1               \n[37] paletteer_1.5.0             lubridate_1.9.2            \n[39] forcats_1.0.0               stringr_1.5.0              \n[41] dplyr_1.1.2                 purrr_1.0.1                \n[43] readr_2.1.4                 tidyr_1.3.0                \n[45] tibble_3.2.1                ggplot2_3.4.2              \n[47] tidyverse_2.0.0            \n\nloaded via a namespace (and not attached):\n  [1] bitops_1.0-7            httr_1.4.6              webshot_0.5.4          \n  [4] doParallel_1.0.17       Rgraphviz_2.44.0        tools_4.3.0            \n  [7] backports_1.4.1         utf8_1.2.3              R6_2.5.1               \n [10] DT_0.27                 lazyeval_0.2.2          questionr_0.7.8        \n [13] GetoptLong_1.0.5        withr_2.5.0             prettyunits_1.1.1      \n [16] klaR_1.7-2              cli_3.6.1               formatR_1.14           \n [19] TSP_1.2-4               flashClust_1.01-2       topGO_2.52.0           \n [22] mvtnorm_1.1-3           genefilter_1.82.1       AnnotationForge_1.42.0 \n [25] labelled_2.11.0         limma_3.56.1            rstudioapi_0.14        \n [28] RSQLite_2.3.1           GOstats_2.66.0          generics_0.1.3         \n [31] shape_1.4.6             combinat_0.0-8          crosstalk_1.2.0        \n [34] car_3.1-2               zip_2.3.0               dendextend_1.17.1      \n [37] GO.db_3.17.0            leaps_3.1               Matrix_1.5-4           \n [40] fansi_1.0.4             abind_1.4-5             lifecycle_1.0.3        \n [43] scatterplot3d_0.3-44    yaml_2.3.7              carData_3.0-5          \n [46] BiocFileCache_2.8.0     blob_1.2.4              promises_1.2.0.1       \n [49] crayon_1.5.2            shinydashboard_0.7.2    miniUI_0.1.1.1         \n [52] lattice_0.21-8          haven_2.5.2             annotate_1.78.0        \n [55] KEGGREST_1.40.0         pillar_1.9.0            knitr_1.42             \n [58] rjson_0.2.21            estimability_1.4.1      codetools_0.2-19       \n [61] glue_1.6.2              data.table_1.14.8       vctrs_0.6.2            \n [64] assertthat_0.2.1        rematch2_2.1.2          cachem_1.0.8           \n [67] xfun_0.39               S4Arrays_1.0.1          mime_0.12              \n [70] survival_3.5-5          pheatmap_1.0.12         seriation_1.4.2        \n [73] iterators_1.0.14        ellipsis_0.3.2          Category_2.66.0        \n [76] nlme_3.1-162            bit64_4.0.5             threejs_0.3.3          \n [79] progress_1.2.2          filelock_1.0.2          AlgDesign_1.2.1        \n [82] colorspace_2.1-0        DBI_1.1.3               tidyselect_1.2.0       \n [85] emmeans_1.8.5           bit_4.0.5               compiler_4.3.0         \n [88] curl_5.0.0              graph_1.78.0            SparseM_1.81           \n [91] xml2_1.3.4              DelayedArray_0.26.2     RBGL_1.76.0            \n [94] NMF_0.26                multcompView_0.1-9      rappdirs_0.3.3         \n [97] digest_0.6.31           shinyBS_0.61.1          rmarkdown_2.21         \n[100] ca_0.71.1               XVector_0.40.0          htmltools_0.5.5        \n[103] pkgconfig_2.0.3         base64enc_0.1-3         highr_0.10             \n[106] dbplyr_2.3.2            fastmap_1.1.1           rlang_1.1.1            \n[109] GlobalOptions_0.1.2     htmlwidgets_1.6.2       shiny_1.7.4            \n[112] jsonlite_1.8.4          BiocParallel_1.34.1     RCurl_1.98-1.12        \n[115] magrittr_2.0.3          GenomeInfoDbData_1.2.10 munsell_0.5.0          \n[118] Rcpp_1.0.10             stringi_1.7.12          zlibbioc_1.46.0        \n[121] MASS_7.3-58.4           plyr_1.8.8              parallel_4.3.0         \n[124] Biostrings_2.68.0       splines_4.3.0           hms_1.1.3              \n[127] locfit_1.5-9.7          igraph_1.4.2            ggsignif_0.6.4         \n[130] rngtools_1.5.2          reshape2_1.4.4          biomaRt_2.56.0         \n[133] futile.options_1.0.1    XML_3.99-0.14           evaluate_0.21          \n[136] lambda.r_1.2.4          BiocManager_1.30.20     tzdb_0.3.0             \n[139] foreach_1.5.2           httpuv_1.6.10           heatmaply_1.4.2        \n[142] reshape_0.8.9           clue_0.3-64             gridBase_0.4-7         \n[145] broom_1.0.4             xtable_1.8-4            rstatix_0.7.2          \n[148] later_1.3.1             memoise_2.0.1           AnnotationDbi_1.62.1   \n[151] registry_0.5-1          cluster_2.1.4           timechange_0.2.0       \n[154] GSEABase_1.62.0         shinyAce_0.4.2"
  }
]