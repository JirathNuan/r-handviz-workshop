---
title: "Plotting Omics Data"
author: 
  - "Jiratchaya Nuanpirom"
  - "Prasert Yodsawat"
  - "Khunanon Chanasongkram"
date: "17 May 2023"
format:
  html:
    toc: true
    number-sections: true
    number-depth: 4
    code-annotations: hover
execute: 
  eval: true
  echo: true
  warning: false
bibliography: references.bib
---

## Load libraries

```{r}
pacman::p_load(
  "tidyverse",
  "kableExtra",
  "openxlsx",
  "DESeq2",
  "pcaExplorer",
  "factoextra",
  "ggsci",
  "ComplexHeatmap",
  "RColorBrewer",
  "EnhancedVolcano",
  "ggvenn", 
  "ggpubr",
  "kableExtra"
  )
```

## Plotting Abundance of Representative Terms

```{r, fig.height=5, fig.width=7}
#| tbl-cap: "First 10 lines of the number of COG category results."
# Load COG dictionary
COG_dict <- read_delim("https://github.com/JirathNuan/r-handviz-workshop/raw/main/datasets/cog_category.txt")   # <1>

# Load eggNOG-mapper result
emapper_dt <- read.xlsx("https://github.com/JirathNuan/r-handviz-workshop/raw/main/datasets/Dme_chr4.emapper.annotations.xlsx",                   # <2>
                        startRow = 3, 
                        cols = 7) %>% 
  filter(COG_category != "-") %>%                               # <3>
  group_by(COG_category) %>%                                    # <4>
  summarize(n = n()) %>%                                        # <5>
  left_join(COG_dict, by = c("COG_category" = "category")) %>%  # <6>
  mutate(label = paste0(COG_category, ": ", category_name))     # <7>

# Show first 10 lines of data frame
head(emapper_dt, 10) %>% kbl() %>% kable_styling(full_width = FALSE)
  
# Plot
ggplot(emapper_dt, aes(x = COG_category, y = n, fill = label)) +  # <8>
  geom_bar(stat = "identity") +                                   # <9>
  scale_y_continuous(breaks = seq(0, 100, 10)) +                  # <10>
  labs(x = "COG category",                                        # <11>
       y = "Number of sequences", 
       fill = "COG category") +
  theme(legend.key.size = unit(0.5, 'cm'))                        # <12>
```

1.  `cog_category.txt` is a cluster of orthologous groups (COG) dictionary. Use for look up the category names into the plot.

2.  Read eggNOG-mapper result from excel file into `emapper_dt`, using `read.xlsx()` from openxlsx library. The excel is read by skipping the first 3 rows and select only 7th column.

3.  Then, go to the next step by pipe `%>%`. This step it to filter unclassified COGs `-` from the `COG_category` using dplyr `filter()`.

4.  Then group the data frame by `COG_category`.

5.  Count number of COGs presented in this eggNOG-mapper result.

6.  Merge COG dictionary into the result using dplyr `left_join()`. Two data frames are merged by matching the column `COG_category` from `emapper_dt` with the column `category` of `COG_dict`.

7.  Then, add new column `label` for the plot legend, by append COG category together with the category name.

8.  Plot the result from by showing `COG_category` in x-axis, number of COGs `n` in y-axis, fill and add legend by column `label`.

9.  Plot bar plot using `geom_bar()` and `stat = "identity"`

10. Set y-axis breaks

11. Customize label of x- and y-axis, and legend name in `fill`.

12. Adjust size of legend using `theme(legend.key.size)`.

## Principal Component Analysis

Typically, PCA is used for dimensionality reduction to get lower-dimensional data while keeping the most variation possible by taking only the first few principal components. In principle, SVD (singlular value decomposition) or eigenvalues of the data covariance matrix can be used to evaluate the principal components.

From [datacamp](https://www.datacamp.com/tutorial/pca-analysis-r), The PCA can be more easily computed by following these five steps:

1.  Normalize data: As these data have different scales, performing PCA on them will result in a biased result. In order to ensure that each attribute contributes equally and to prevent one variable from dominating others, the data set needs to be normalized.

2.  Computing the covariable matrix from the normalized data. This is a symmetric matrix, and each element (i, j) corresponds to the covariance between variables i and j.

3.  Get Eigenvectors and eigenvalues: The term eigenvector refers to a direction in mathematics, such as "vertical" or "90 degrees". By contrast, an eigenvalue represents how much variance there is in a given direction in the data. Therefore, each eigenvector has a corresponding eigenvalue.

4.  Select the principal components: It's about choosing the eigenvector with the highest eigenvalue that corresponds to the first principal component. The second principal component is the eigenvector with the second highest eigenvalue, etc.

5.  Transforming data into a new form: A new subspace is defined by the principal components, so the original data is re-oriented by multiplying it by the previously computed eigenvectors. As a result of this transformation, the original data doesn't change, but instead provides a new perspective to better represent it.

We will demonstrate PCA on a *pasilla* data set [@brooks2010]. This data set was obtained from an experiment on *Drosophila melanogaster* cell cultures that investigated the effects of knocking down the splicing factor *pasilla* using RNAi.

```{r}
#| fig-width: 6
#| fig-height: 4
#| tbl-subcap: 
#|   - "First 10 rows of de_input"
#|   - "Example of coldata"

# Load data set
cts <- read_delim("https://raw.githubusercontent.com/JirathNuan/r-handviz-workshop/main/datasets/cts.tsv")

# Prepare DESeq input, which is expecting a matrix of integers.
de_input <- as.matrix(cts[,-1])                                            # <1>
row.names(de_input)<- cts$transcript_name
# Remove NAs
de_input <- de_input[complete.cases(de_input), ]                           # <2>

# Show first 10 rows of the matrix
kbl(head(de_input, 10))

# Create sample metadata     
coldata <- data.frame(sample = colnames(de_input),                         # <3>
                      sample_group = gsub("[0-9]", "", colnames(de_input)))


# Show how experimental data looks like
kbl(coldata)
```

1.  Load data set into `cts` data frame, and convert to matrix.

2.  Removing NA. The whole row will be deleted if NA is observed.

3.  Sample metadata should show a relationship between the sample name (from the matrix column), the sample group, and other experimental design.

This workshop will demonstrate data normalization using `DESeq2` library.

```{r}
# Create DESeq object by load matrix and experimental design
dds <- DESeqDataSetFromMatrix(countData = de_input,                         # <1>
                              colData = coldata,
                              design= ~ sample_group)

# Perform differential expression analysis
dds <- DESeq(dds)                                                          # <2>

# Create a normalized matrix of cts data set
cts_norm <- counts(dds, normalized = TRUE)                                 # <3>

# Show how the data looks like
head(cts_norm) %>% kbl()
```

1.  Create DESeq object using count matrix and sample metadata.

2.  This function is from DESeq2, to perform differential expression analysis based on the Negative Binomial (a.k.a. Gamma-Poisson) distribution. The analysis started with estimating size factors, estimating dispersion, and fitting the Negative Binomial GLM model and calculate Wald statistics.

3.  Create a matrix of normalized count from DESeq2 object after DE analysis.

This step is to transform the count matrix through Rlog (regularized log) transforms. Which transform the original count data into log2 scale by fitting a model with a term for each sample and a prior distribution on the coefficients. Use before plotting PCA.

```{r}
#| fig-width: 7
#| fig-height: 4.5
# Plot PCA With pcaExplorer
rld_dds <- rlogTransformation(dds)                                 # <1>
pca_dds <- pcaplot(                                                # <2>
  rld_dds,
  intgroup = "sample_group",
  ntop = Inf,
  pcX = 1,
  pcY = 2,
  title = "",
  text_labels = TRUE
) +
  scale_fill_npg() +
  scale_color_npg() +
  theme(legend.position = "bottom") +
  coord_flip()
pca_dds
```

1.  Rlog (regularized log) transforms the original count data into log2 scale by fitting a model with a term for each sample and a prior distribution on the coefficients. Use before plotting PCA.

2.  Plot PCA

This step is to examine the principal components and visualizing eigenvalues as a scree plot. A scree plot is used to determine the number of significant principal components in a set of data. It is a line graph that shows the eigenvalues of each component in descending order. This helps to identify which components are most important and which can be discarded.

We'll demonstrate a scree plot using `fviz_eig()` function from `factoextra` library.

```{r}
#| fig-width: 7
#| fig-height: 4.5
# Scree plot
pcaobj_dds <- prcomp(t(assay(rld_dds)))

# Visualizing scree plot
fviz_eig(pcaobj_dds, 
         addlabels = TRUE, 
         barfill = pal_npg()(1),
         barcolor = "black",
         title = "Proportion of explained proportion of variance - cts data set",
         ggtheme = theme_gray())
```

Then, extract genes that are mostly contributed in the principal components. By extracting genes that are primarily responsible for the principal components, it becomes easier to understand the underlying structure of the data and identify potential observations that are associated with certain variables.

```{r}
# extract the table of the genes with high loadings
top100_pc <- hi_loadings(pcaobj_dds,
                         topN = 100,
                         exprTable = counts(dds))

# Show how experimental data looks like
head(top100_pc) %>% kbl() %>% kable_styling(full_width = FALSE)

```

Then, plot PCA biplot`genespca()` by compute the principal components of the genes, eventually displaying the samples as in a typical biplot visualization.

```{r}
groups_cts <- colData(dds)$sample_group

cols_cts <- scales::hue_pal()(2)[groups_cts]

# with many genes, do not plot the labels of the genes
genespca(
  rld_dds,
  ntop = 100,
  choices = c(1, 2),
  arrowColors = cols_cts,
  groupNames = groups_cts,
  useRownamesAsLabels = FALSE,
  varname.size = 5,
  biplot = TRUE,
  alpha = 0.5,
  point_size = 2.5
)

```

Plots the distribution of expression values, either with density lines, boxplots or violin plots.

```{r}
#| layout-ncol: 3
distro_expr(rld_dds, plot_type = "violin") + 
  scale_fill_npg() + 
  scale_color_npg()

distro_expr(rld_dds, plot_type = "boxplot") + 
  scale_fill_npg() + 
  scale_color_npg()
```

> See more usage of **pcaExplorer**: <https://federicomarini.github.io/pcaExplorer/articles/pcaExplorer.html#functions-exported-by-the-package-for-standalone-usage>

## Hierarchical Clustering Analysis (Heat maps)

Hierarchical clustering is an unsupervised machine learning algorithm. It is used to group data points into clusters based on their similarity. The algorithm gradually merges or splits clusters after creating a hierarchy. As a result, a dendrogram shows which points are in each cluster and how similar they are.

We'll demonstrate the hierarchical clustering and plot heat map using `pheatmap()`.

```{r}
# Create annotation column
annot_column <- data.frame(sample = colnames(top100_pc),
                           group = gsub("[0-9]", "", colnames(top100_pc))) %>% 
  column_to_rownames(var = "sample")

annot_column %>% kbl()

# Create a list of annotation color
sample_pal <- pal_npg()(2)
annot_colors <- list(group = c(treated = sample_pal[1],
                               untreated = sample_pal[2]))
```

-   Heat map of Top 100 genes that are mostly contributed in the principal components above.

```{r}
#| fig-width: 5
#| fig-height: 7
# Heatmap of the top 100 principal components
hm_top100pc <- pheatmap(
  top100_pc,
  scale = "row",
  color = colorRampPalette(rev(brewer.pal(n = 7, name = "RdBu")))(100),
  show_rownames = FALSE,
  name = "Normalized count",
  clustering_distance_rows = "euclidean",
  clustering_distance_cols = "euclidean",
  clustering_method = "complete",
  annotation_col = annot_column,
  annotation_names_col = FALSE,
  annotation_colors = annot_colors,
  cutree_rows = 3,
  annotation_legend = FALSE
)
hm_top100pc
```

-   Heat map of differentially expressed genes.

```{r}
# Identify differentially expressed genes
dds_result <- results(object = dds,
                      contrast = c("sample_group", "untreated", "treated"),
                      tidy = TRUE,
                      pAdjustMethod = "fdr")
```

Filter DEG, we'll use absolute log2FC \> 1 and FDR \< 0.05

```{r}
#| fig-width: 5
#| fig-height: 7
dds_result_deg <- dds_result %>% 
  filter(padj < 0.05 & abs(log2FoldChange) > 1)

# Extract count matrix of DEGenes
deg_norm_count <- cts_norm[rownames(cts_norm) %in% dds_result_deg$row, ]

# Plot heatmap of DEGs
# Heatmap of the top 100 principal components
hm_deg <- pheatmap(
  deg_norm_count,
  scale = "row",
  color = colorRampPalette(rev(brewer.pal(n = 7, name = "RdBu")))(100),
  show_rownames = FALSE,
  name = "Normalized count",
  clustering_distance_rows = "euclidean",
  clustering_distance_cols = "euclidean",
  clustering_method = "complete",
  annotation_col = annot_column,
  annotation_names_col = FALSE,
  annotation_colors = annot_colors,
  cutree_rows = 2,
  annotation_legend = FALSE)
hm_deg
```

> See more `pheatmap()` usage: <https://www.reneshbedre.com/blog/heatmap-with-pheatmap-package-r.html>

## Volcano Plot

```{r}
volcano_deg <- dds_result %>% 
  mutate(Expression = case_when(
      log2FoldChange >= 1 & padj <= 0.05 ~ "Upregulated",
      log2FoldChange <= -1 & padj <= 0.05 ~ "Downregulated",
      TRUE ~ "Unchanged"))

p_volcano <- EnhancedVolcano(
  volcano_deg,
  lab = volcano_deg$row,
  x = 'log2FoldChange',
  y = 'padj',
  xlim = c(-5,5),
  ylab = bquote( ~ -Log[10] ~ italic(FDR)),
  title = NULL,
  caption = NULL,
  subtitle = NULL,
  pCutoff = 0.05,
  pointSize = 3,
  labSize = 3,
  col = c("grey50", "dodgerblue3", "dodgerblue3", "firebrick2"),
  legendLabels = c("NS", 
                   expression(abs(log[2] ~ FC) > 1),
                   "FDR < 0.05",
                   expression(Pvalue < 0.05 ~ and ~ abs(log[2] ~ FC) > 1))) +
  theme_minimal() +
  theme(legend.position = "bottom",
        panel.border = element_rect(fill = NA, color = "black"),
        panel.grid = element_blank())


p_volcano
```

> See more `EnhancedVolcano()` usage: <https://bioconductor.org/packages/devel/bioc/vignettes/EnhancedVolcano/inst/doc/EnhancedVolcano.html>

## Venn Diagram and Upset Plot

### Plotting Venn diagram with `ggvenn`

```{r}
# Load data
mouse_hallmarks <- read_delim("https://github.com/JirathNuan/r-handviz-workshop/raw/main/datasets/mouse_msigdb_6hallmarks.txt")

# Split into list
lst_mouse_hallmark <- as.list(mouse_hallmarks)
# remove NAs
lst_mouse_hallmark <- lapply(lst_mouse_hallmark, na.omit)

# Chart
ggvenn(
  lst_mouse_hallmark, 
  fill_color = pal_npg()(6),
  stroke_size = 0.5, 
  set_name_size = 3
  )

```

::: {.callout-caution appearance="simple"}
## Venn diagram limitation

Venn diagrams are simple and easy to interpret, however, ggvenn only allows the visualization of four features at a time. As a result, an alternative of Venn diagram has been developed.
:::

### Venn diagram alternative: Upset Plot

UpSet plots are more efficient than Venn Diagrams at visualizing intersections of multiple sets. They are particularly useful when analyzing large datasets with many variables. They help to identify patterns and relationships between different sets more quickly and easily than other visualizations.

There are 3 different modes of upset plot, distinct (default), intersect, and union. Here we'll only demonstrate the default mode.

```{r}
set.seed(123)

# Make present-absent matrix of data list
mouse_hm_mat01 <- list_to_matrix(lst_mouse_hallmark)
# Show how the combination matrix looks like
head(mouse_hm_mat01) %>% kbl()


# Make the combination matrix
comb_mat <- make_comb_mat(lst_mouse_hallmark)
comb_mat
```

[Referred from]{.underline} a full guide of complexHeatmap: The UpSet plot visualizes the **size** of each combination set. With the binary code of each combination set, we can calculate the size. There are three modes.

![Figure from: <https://jokergoo.github.io/ComplexHeatmap-reference/book/upset-plot.html#upset-plot>](https://jokergoo.github.io/ComplexHeatmap-reference/book/08-upset_files/figure-html/unnamed-chunk-7-1.png){fig-align="center" width="50%"}

Plot upset plot

```{r}
pal_upset <- pal_npg()(4)
# Plot upset following the default upset mode.
upset_mouse_hm <-
  UpSet(
    comb_mat,
    comb_col = pal_upset[1],
    row_names_gp = gpar(fontsize = 10),
    right_annotation = upset_right_annotation(
      comb_mat,
      gp = gpar(fill = pal_upset[2]),
      add_numbers = TRUE
    ),
    top_annotation = upset_top_annotation(
      comb_mat,
      gp = gpar(fill = pal_upset[1]),
      add_numbers = TRUE
    )
  )
upset_mouse_hm
```

> See more `UpSet()` usage from a complete reference of complexHeatmap: <https://jokergoo.github.io/ComplexHeatmap-reference/book/upset-plot.html#upset-plot>

## ggplot2 Based Publication Ready Plots with `ggpubr`

```{r}
# Load dataset
mouseLiver_ctg <- read_csv("https://github.com/JirathNuan/r-handviz-workshop/raw/main/datasets/mouseLiver_data_ClinicalTraits.csv")

# Inspect the data
head(mouseLiver_ctg) %>% kbl()

```

### Histogram

```{r}
gghistogram(
  mouseLiver_ctg,
  x = "weight_g",
  add = "mean",
  rug = TRUE,
  color = "sex",
  fill = "sex",
  bins = 30,
  palette = "npg",
  xlab = "Weight (g)",
  ylab = "Frequency"
)
```

### Density plot

```{r}
ggdensity(
  mouseLiver_ctg,
  x = "weight_g",
  add = "mean",
  rug = TRUE,
  color = "sex",
  fill = "sex",
  palette = "npg",
  xlab = "Weight (g)",
  ylab = "Frequency"
)
```

### Simple box plot

```{r}
p_boxplot <- ggboxplot(ToothGrowth, x = "supp", y = "len",
          color = "supp", palette = "npg",
          add = "jitter",
          xlab = "Supplement type",
          ylab = "Tooth length")
p_boxplot
```

Adding statistical significance to the plot

-   Pairwise comparison

```{r}
#| layout-ncol: 2
# Try to calculate stat first
compare_means(len ~ supp, data = ToothGrowth, method = "anova")
compare_means(len ~ supp, data = ToothGrowth, method = "wilcox.test")

# Plot box plot with significance
p_boxplot + stat_compare_means(method = "anova")
p_boxplot + stat_compare_means(method = "wilcox.test")

# Change style of singnificance notation
p_boxplot + stat_compare_means(method = "anova",
                               aes(label = ..p.signif..),
                               label.x = 1.5,
                               label.y = 40)

p_boxplot + stat_compare_means(method = "wilcox.test",
                               aes(label = "p.signif"),
                               label.x = 1.5,
                               label.y = 40)
```

-   Compare more than two groups

```{r}
#| layout-ncol: 2
# Global test
compare_means(len ~ dose,  data = ToothGrowth, method = "anova")

# Default method = "kruskal.test" for multiple groups
ggboxplot(ToothGrowth, x = "dose", y = "len",
          fill = "dose", palette = "npg")+
  stat_compare_means()

# Change method to anova
ggboxplot(ToothGrowth, x = "dose", y = "len",
          fill = "dose", palette = "npg")+
  stat_compare_means(method = "anova")
```

```{r}
# Perorm pairwise comparisons
compare_means(len ~ dose,  data = ToothGrowth)

# Visualize: Specify the comparisons you want
my_comparisons <- list(c("0.5", "1"), c("1", "2"), c("0.5", "2"))

ggboxplot(
  ToothGrowth,
  x = "dose",
  y = "len",
  fill = "dose",
  palette = "npg") +
  stat_compare_means(comparisons = my_comparisons) + # Add pairwise comparisons p-value
  stat_compare_means(label.y = 50)     # Add global p-value
```

-   Multiple pairwise tests against a reference group

```{r}
# Pairwise comparison against reference
compare_means(len ~ dose,
              data = ToothGrowth,
              ref.group = "0.5",
              method = "t.test")

# Visualize
ggboxplot(
  ToothGrowth,
  x = "dose",
  y = "len",
  fill = "dose",
  palette = "npg") +
  stat_compare_means(method = "anova", label.y = 40) +      # Add global p-value
  stat_compare_means(label = "p.signif",
                     method = "t.test",
                     ref.group = "0.5")                    # Pairwise comparison against reference
```

Multiple grouping variables

```{r}
compare_means(len ~ supp, data = ToothGrowth, group.by = "dose")

# Box plot facetted by "dose"
p_box <- ggboxplot(
  ToothGrowth,
  x = "supp",
  y = "len",
  color = "supp",
  palette = "jco",
  add = "jitter",
  facet.by = "dose",
  short.panel.labs = FALSE
)
# Use only p.format as label. Remove method name.
p_box + stat_compare_means(label = "p.format")
```

### Bar and line plots (one grouping variable):

```{r}
#| layout-ncol: 2
ggbarplot(
  ToothGrowth,
  x = "dose",
  y = "len",
  add = "mean_se",
  fill = "supp",
  palette = "npg",
  color = "black",
  position = position_dodge(0.8)) +
  stat_compare_means(aes(group = supp), label = "p.signif", label.y = 29)

ggline(
  ToothGrowth,
  x = "dose",
  y = "len",
  add = "mean_se",
  color = "supp",
  palette = "npg") +
  stat_compare_means(aes(group = supp),
                     label = "p.signif",
                     label.y = c(16, 25, 29))
```

### Scatter plot

```{r}
p4 <- ggscatter(
  mtcars,
  x = "wt",
  y = "mpg",
  fill = "mpg",
  size = 4,
  shape = 21) +
  gradient_fill(c("blue", "white", "red"))
p4

```

> More usage of ggpubr: <http://www.sthda.com/english/articles/24-ggpubr-publication-ready-plots/76-add-p-values-and-significance-levels-to-ggplots/>.

## Session info

```{r}
sessionInfo()
```
